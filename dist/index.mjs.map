{"version":3,"file":"index.mjs","sources":["../src/providers/RealtimeSaga.ts","../src/misc/logger.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/misc/pathHelper.ts","../src/providers/database/ResourceManager.ts","../src/misc/arrayHelpers.ts","../src/providers/database/FirebaseClient.ts","../src/providers/DataProvider.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["import realtimeSaga from \"ra-realtime\";\r\nimport { fb } from \"./DataProvider\";\r\nimport { RAFirebaseOptions } from \"index\";\r\n\r\nconst observeRequest = (dataProvider, options?: RAFirebaseOptions) => (type, resource, params) => {\r\n  const safeOptions = options || {};\r\n  if (Array.isArray(safeOptions.watch)) {\r\n    const mustWatchResource = safeOptions.watch.includes(resource);\r\n    if (!mustWatchResource) {\r\n      return;\r\n    }\r\n  }\r\n  if (Array.isArray(safeOptions.dontwatch)) {\r\n    const mustNotWatchResource = safeOptions.dontwatch.includes(resource);\r\n    if (mustNotWatchResource) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  return {\r\n    subscribe(observer) {\r\n      dataProvider(type, resource, params)\r\n        .then((results) => observer.next(results)) // New data received, notify the observer\r\n        .catch((error) => observer.error(error)); // Ouch, an error occured, notify the observer\r\n\r\n      const subscription = {\r\n        unsubscribe() {\r\n          // Notify the saga that we cleaned up everything\r\n          // observer.complete();\r\n          // ^ THIS FAILS FRAMEWORK ISSUE\r\n        }\r\n      };\r\n\r\n      return subscription;\r\n    }\r\n  };\r\n};\r\n\r\nexport function RealtimeSaga(dataProvider, options) {\r\n  return realtimeSaga(observeRequest(dataProvider, options));\r\n}\r\n","import { RAFirebaseOptions } from \"providers/RAFirebaseOptions\";\r\n\r\n// UTILS\r\n\r\nexport function log(description: string, obj?: {}) {\r\n  if (ISDEBUG) {\r\n    console.log(\"react-admin-firebase: \", description, obj);\r\n  }\r\n}\r\n\r\nexport function logError(description: string, obj?: {}) {\r\n  if (ISDEBUG) {\r\n    console.error(\"react-admin-firebase: \", description, obj);\r\n  }\r\n}\r\n\r\n// tslint:disable-next-line: no-var-keyword\r\nvar ISDEBUG = false;\r\n\r\nexport function CheckLogging(config: {}, options: RAFirebaseOptions) {\r\n  if ((config && config['debug']) || options.logging) {\r\n    ISDEBUG = true;\r\n  }\r\n}","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import path from 'path-browserify'\r\n\r\nexport function getAbsolutePath(rootRef: string, relativePath: string): string {\r\n  if (!rootRef) {\r\n    return relativePath;\r\n  }\r\n  if (!relativePath) {\r\n    throw new Error('Resource name must be a string of length greater than 0 characters');\r\n  }\r\n  const withSlashes = path.join('/', rootRef, '/', relativePath, '/');\r\n  const slashCount = withSlashes.split(\"/\").length - 1\r\n  if (slashCount % 2) {\r\n    throw new Error(`The rootRef path must point to a \"document\" not a \"collection\"\r\ne.g. /collection/document/ or /collection/document/collection/document/`);\r\n  }\r\n  const withOutSlashes = withSlashes.slice(1, -1);\r\n  return withOutSlashes;\r\n}\r\n\r\nexport function joinPaths(path1, path2) {\r\n  return path.join(path1, path2);\r\n}","// Firebase types\r\nimport {\r\n  CollectionReference,\r\n  QueryDocumentSnapshot,\r\n  FirebaseFirestore\r\n} from \"@firebase/firestore-types\";\r\nimport { RAFirebaseOptions } from \"index\";\r\nimport { log } from \"../../misc/logger\";\r\nimport { getAbsolutePath } from \"../../misc/pathHelper\";\r\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\r\nimport { User } from \"@firebase/auth-types\";\r\nimport { messageTypes } from \"../../misc/messageTypes\";\r\n\r\nexport interface IResource {\r\n  path: string;\r\n  pathAbsolute: string;\r\n  collection: CollectionReference;\r\n  list: Array<{}>;\r\n}\r\n\r\nexport class ResourceManager {\r\n  private resources: {\r\n    [resourceName: string]: IResource;\r\n  } = {};\r\n\r\n  private db: FirebaseFirestore;\r\n\r\n  constructor(\r\n    private fireWrapper: IFirebaseWrapper,\r\n    private options: RAFirebaseOptions\r\n  ) {\r\n    this.db = fireWrapper.db();\r\n  }\r\n\r\n  public GetResource(relativePath: string): IResource {\r\n    const resource: IResource = this.resources[relativePath];\r\n    if (!resource) {\r\n      throw new Error(\r\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\r\n      );\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  public async TryGetResourcePromise(\r\n    relativePath: string,\r\n    collectionQuery: messageTypes.CollectionQueryType\r\n  ): Promise<IResource> {\r\n    await this.initPath(relativePath, collectionQuery);\r\n\r\n    const resource: IResource = this.resources[relativePath];\r\n    if (!resource) {\r\n      throw new Error(\r\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\r\n      );\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  public async RefreshResource(\r\n    relativePath: string,\r\n    collectionQuery: messageTypes.CollectionQueryType\r\n  ) {\r\n    await this.initPath(relativePath, collectionQuery);\r\n    const resource = this.resources[relativePath];\r\n    log(\"resourceManager.RefreshResource\", { relativePath });\r\n\r\n    const collection = resource.collection;\r\n    const query = this.applyQuery(collection, collectionQuery);\r\n    const newDocs = await query.get();\r\n\r\n    resource.list = newDocs.docs.map(doc => this.parseFireStoreDocument(doc));\r\n  }\r\n\r\n  public async GetSingleDoc(relativePath: string, docId: string) {\r\n    await this.initPath(relativePath);\r\n    const resource = this.resources[relativePath];\r\n    const res = await resource.collection.doc(docId).get();\r\n    if (!res.exists) {\r\n      throw new Error(\"react-admin-firebase: No id found matching: \" + docId);\r\n    }\r\n    const result = this.parseFireStoreDocument(res);\r\n    return result;\r\n  }\r\n\r\n  private async initPath(\r\n    relativePath: string,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<void> {\r\n    const absolutePath = getAbsolutePath(this.options.rootRef, relativePath);\r\n    log(\"resourceManager.initPath:::\", { absolutePath });\r\n    const isAccessible = await this.isCollectionAccessible(\r\n      absolutePath,\r\n      collectionQuery\r\n    );\r\n\r\n    const hasBeenInited = this.resources[relativePath];\r\n    if (!isAccessible) {\r\n      if (hasBeenInited) {\r\n        this.removeResource(relativePath);\r\n      }\r\n      return;\r\n    }\r\n    if (hasBeenInited) {\r\n      return;\r\n    }\r\n    const collection = this.db.collection(absolutePath);\r\n    const list: Array<{}> = [];\r\n    const resource: IResource = {\r\n      collection: collection,\r\n      list: list,\r\n      path: relativePath,\r\n      pathAbsolute: absolutePath\r\n    };\r\n    this.resources[relativePath] = resource;\r\n  }\r\n\r\n  private parseFireStoreDocument(doc: QueryDocumentSnapshot): {} {\r\n    const data = doc.data();\r\n    Object.keys(data).forEach(key => {\r\n      const value = data[key];\r\n      if (value && value.toDate && value.toDate instanceof Function) {\r\n        data[key] = value.toDate();\r\n      }\r\n    });\r\n    // React Admin requires an id field on every document,\r\n    // So we can just using the firestore document id\r\n    return { id: doc.id, ...data };\r\n  }\r\n\r\n  public async getUserLogin(): Promise<User> {\r\n    return new Promise((resolve, reject) => {\r\n      this.fireWrapper.auth().onAuthStateChanged(user => {\r\n        resolve(user);\r\n      });\r\n    });\r\n  }\r\n\r\n  private async isCollectionAccessible(\r\n    absolutePath: string,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<boolean> {\r\n    try {\r\n      const collection = this.db.collection(absolutePath);\r\n      const query = this.applyQuery(collection, collectionQuery);\r\n\r\n      await query.get();\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private removeResource(resourceName: string) {\r\n    delete this.resources[resourceName];\r\n  }\r\n\r\n  private applyQuery(\r\n    collection: CollectionReference,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): CollectionReference {\r\n    if (!collectionQuery) return collection;\r\n\r\n    return collectionQuery(collection);\r\n  }\r\n}\r\n","function isEmptyObj(obj) {\r\n  if (!obj) {\r\n    return true;\r\n  }\r\n  return JSON.stringify(obj) === '{}';\r\n}\r\n\r\nexport function sortArray(\r\n  data: Array<{}>,\r\n  field: string,\r\n  dir: 'asc' | 'desc'\r\n): void {\r\n  data.sort((a: {}, b: {}) => {\r\n    const rawA = a[field];\r\n    const rawB = b[field];\r\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\r\n    let aValue: string, bValue: string;\r\n    if (isNumberField) {\r\n      aValue = rawA;\r\n      bValue = rawB;\r\n    } else {\r\n      aValue = (a[field] || '').toString().toLowerCase();\r\n      bValue = (b[field] || '').toString().toLowerCase();\r\n    }\r\n    if (aValue > bValue) {\r\n      return dir === 'asc' ? 1 : -1;\r\n    }\r\n    if (aValue < bValue) {\r\n      return dir === 'asc' ? -1 : 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nexport function filterArray(\r\n  data: Array<{}>,\r\n  filterFields: { [field: string]: string }\r\n): Array<{}> {\r\n  if (isEmptyObj(filterFields)) {\r\n    return data;\r\n  }\r\n  const fieldNames = Object.keys(filterFields);\r\n  return data.filter(item =>\r\n    fieldNames.reduce((previousMatched, fieldName) => {\r\n      let fieldVal = filterFields[fieldName];\r\n      if (fieldVal == null || fieldVal == undefined) {\r\n        fieldVal = '';\r\n      }\r\n      const fieldSearchText = fieldVal.toString().toLowerCase();\r\n      const dataFieldValue = item[fieldName];\r\n      if (dataFieldValue == null) {\r\n        return false;\r\n      }\r\n      const currentIsMatched = dataFieldValue\r\n        .toString()\r\n        .toLowerCase()\r\n        .includes(fieldSearchText);\r\n      return previousMatched || currentIsMatched;\r\n    }, false)\r\n  );\r\n}\r\n","import { FirebaseFirestore } from \"@firebase/firestore-types\";\r\nimport { ResourceManager, IResource } from \"./ResourceManager\";\r\nimport { RAFirebaseOptions } from \"index\";\r\nimport { log, logError } from \"../../misc/logger\";\r\nimport { sortArray, filterArray } from \"../../misc/arrayHelpers\";\r\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\r\nimport { IFirebaseClient } from \"./IFirebaseClient\";\r\nimport { messageTypes } from \"../../misc/messageTypes\";\r\nimport { joinPaths } from \"../../misc/pathHelper\";\r\n\r\nexport class FirebaseClient implements IFirebaseClient {\r\n  private db: FirebaseFirestore;\r\n  private rm: ResourceManager;\r\n\r\n  constructor(\r\n    private fireWrapper: IFirebaseWrapper,\r\n    private options: RAFirebaseOptions\r\n  ) {\r\n    this.db = fireWrapper.db();\r\n    this.rm = new ResourceManager(this.fireWrapper, this.options);\r\n  }\r\n  public async apiGetList(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetList\r\n  ): Promise<messageTypes.IResponseGetList> {\r\n    log(\"apiGetList\", { resourceName, params });\r\n\r\n    const collectionQuery = params.filter.collectionQuery;\r\n    delete params.filter.collectionQuery;\r\n\r\n    const r = await this.tryGetResource(\r\n      resourceName,\r\n      \"REFRESH\",\r\n      collectionQuery\r\n    );\r\n    const data = r.list;\r\n    if (params.sort != null) {\r\n      const { field, order } = params.sort;\r\n      if (order === \"ASC\") {\r\n        sortArray(data, field, \"asc\");\r\n      } else {\r\n        sortArray(data, field, \"desc\");\r\n      }\r\n    }\r\n    // @ts-ignore\r\n    const filteredData = filterArray(data, params.filter);\r\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\r\n    const pageEnd = pageStart + params.pagination.perPage;\r\n    const dataPage = filteredData.slice(pageStart, pageEnd);\r\n    const total = r.list.length;\r\n    return {\r\n      data: dataPage,\r\n      total\r\n    };\r\n  }\r\n  public async apiGetOne(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetOne\r\n  ): Promise<messageTypes.IResponseGetOne> {\r\n    log(\"apiGetOne\", { resourceName, params });\r\n    try {\r\n      const data = await this.rm.GetSingleDoc(resourceName, params.id);\r\n      return { data: data };\r\n    } catch (error) {\r\n      throw new Error(\r\n        \"Error getting id: \" + params.id + \" from collection: \" + resourceName\r\n      );\r\n    }\r\n  }\r\n  public async apiCreate(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsCreate\r\n  ): Promise<messageTypes.IResponseCreate> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiCreate\", { resourceName, resource: r, params });\r\n    const currentUserEmail = await this.getCurrentUserEmail();\r\n    const hasOverridenDocId = params.data && params.data.id;\r\n    if (hasOverridenDocId) {\r\n      const overridenId = params.data.id;\r\n      const data = await this.parseDataAndUpload(r, overridenId, params.data);\r\n      if (!overridenId) {\r\n        throw new Error(\"id must be a valid string\");\r\n      }\r\n      const docObj = {\r\n        ...data,\r\n        createdate: this.fireWrapper.serverTimestamp(),\r\n        lastupdate: this.fireWrapper.serverTimestamp(),\r\n        createdby: currentUserEmail,\r\n        updatedby: currentUserEmail\r\n      };\r\n      await r.collection.doc(overridenId).set(docObj, { merge: true });\r\n      return {\r\n        data: {\r\n          ...data,\r\n          id: overridenId\r\n        }\r\n      };\r\n    }\r\n    const newId = this.db.collection(\"collections\").doc().id;\r\n    const data = await this.parseDataAndUpload(r, newId, params.data);\r\n    const docObj = {\r\n      ...data,\r\n      createdate: this.fireWrapper.serverTimestamp(),\r\n      lastupdate: this.fireWrapper.serverTimestamp(),\r\n      createdby: currentUserEmail,\r\n      updatedby: currentUserEmail\r\n    };\r\n    await r.collection.doc(newId).set(docObj, { merge: false });\r\n    return {\r\n      data: {\r\n        ...data,\r\n        id: newId\r\n      }\r\n    };\r\n  }\r\n  public async apiUpdate(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsUpdate\r\n  ): Promise<messageTypes.IResponseUpdate> {\r\n    const id = params.id;\r\n    delete params.data.id;\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiUpdate\", { resourceName, resource: r, params });\r\n    const currentUserEmail = await this.getCurrentUserEmail();\r\n    const data = await this.parseDataAndUpload(r, id, params.data);\r\n    r.collection\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        lastupdate: this.fireWrapper.serverTimestamp(),\r\n        updatedby: currentUserEmail\r\n      })\r\n      .catch(error => {\r\n        logError(\"apiUpdate error\", { error });\r\n      });\r\n    return {\r\n      data: {\r\n        ...data,\r\n        id: id\r\n      }\r\n    };\r\n  }\r\n  public async apiUpdateMany(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsUpdateMany\r\n  ): Promise<messageTypes.IResponseUpdateMany> {\r\n    delete params.data.id;\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiUpdateMany\", { resourceName, resource: r, params });\r\n    const ids = params.ids;\r\n    const currentUserEmail = await this.getCurrentUserEmail();\r\n    const returnData = await Promise.all(\r\n      ids.map(async id => {\r\n        const data = await this.parseDataAndUpload(r, id, params.data);\r\n        r.collection\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            lastupdate: this.fireWrapper.serverTimestamp(),\r\n            updatedby: currentUserEmail\r\n          })\r\n          .catch(error => {\r\n            logError(\"apiUpdateMany error\", { error });\r\n          });\r\n        return {\r\n          ...data,\r\n          id: id\r\n        };\r\n      })\r\n    );\r\n    return {\r\n      data: returnData\r\n    };\r\n  }\r\n  public async apiDelete(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsDelete\r\n  ): Promise<messageTypes.IResponseDelete> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiDelete\", { resourceName, resource: r, params });\r\n    r.collection\r\n      .doc(params.id)\r\n      .delete()\r\n      .catch(error => {\r\n        logError(\"apiDelete error\", { error });\r\n      });\r\n    return {\r\n      data: params.previousData\r\n    };\r\n  }\r\n  public async apiDeleteMany(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsDeleteMany\r\n  ): Promise<messageTypes.IResponseDeleteMany> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiDeleteMany\", { resourceName, resource: r, params });\r\n    const returnData: { id: string }[] = [];\r\n    const batch = this.db.batch();\r\n    for (const id of params.ids) {\r\n      batch.delete(r.collection.doc(id));\r\n      returnData.push({ id });\r\n    }\r\n    batch.commit().catch(error => {\r\n      logError(\"apiDeleteMany error\", { error });\r\n    });\r\n    return { data: returnData };\r\n  }\r\n  public async apiGetMany(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetMany\r\n  ): Promise<messageTypes.IResponseGetMany> {\r\n    const r = await this.tryGetResource(resourceName, \"REFRESH\");\r\n    log(\"apiGetMany\", { resourceName, resource: r, params });\r\n    const ids = params.ids;\r\n    const matchDocSnaps = await Promise.all(\r\n      ids.map(id => r.collection.doc(id).get())\r\n    );\r\n    const matches = matchDocSnaps.map(snap => {\r\n      return { ...snap.data(), id: snap.id };\r\n    });\r\n    return {\r\n      data: matches\r\n    };\r\n  }\r\n  public async apiGetManyReference(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetManyReference\r\n  ): Promise<messageTypes.IResponseGetManyReference> {\r\n    const r = await this.tryGetResource(resourceName, \"REFRESH\");\r\n    log(\"apiGetManyReference\", { resourceName, resource: r, params });\r\n    const data = r.list;\r\n    const targetField = params.target;\r\n    const targetValue = params.id;\r\n    const matches = data.filter(val => val[targetField] === targetValue);\r\n    if (params.sort != null) {\r\n      const { field, order } = params.sort;\r\n      if (order === \"ASC\") {\r\n        sortArray(data, field, \"asc\");\r\n      } else {\r\n        sortArray(data, field, \"desc\");\r\n      }\r\n    }\r\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\r\n    const pageEnd = pageStart + params.pagination.perPage;\r\n    const dataPage = matches.slice(pageStart, pageEnd);\r\n    const total = matches.length;\r\n    return { data: dataPage, total };\r\n  }\r\n  private async tryGetResource(\r\n    resourceName: string,\r\n    refresh?: \"REFRESH\",\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<IResource> {\r\n    if (refresh) {\r\n      await this.rm.RefreshResource(resourceName, collectionQuery);\r\n    }\r\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\r\n  }\r\n  private async getCurrentUserEmail() {\r\n    const user = await this.rm.getUserLogin();\r\n    if (user) {\r\n      return user.email;\r\n    } else {\r\n      return \"annonymous user\";\r\n    }\r\n  }\r\n\r\n  private async parseDataAndUpload(r: IResource, id: string, data: any) {\r\n    if (!data) {\r\n      return data;\r\n    }\r\n    const docPath = r.collection.doc(id).path;\r\n\r\n    await Promise.all(\r\n      Object.keys(data).map(async fieldName => {\r\n        const val = data[fieldName];\r\n        const isArray = Array.isArray(val);\r\n        if (isArray) {\r\n          await Promise.all(\r\n            (val as []).map((arrayObj, index) => {\r\n              if (!!val[index] && val[index].hasOwnProperty(\"rawFile\")) {\r\n                return Promise.all([\r\n                  this.parseDataField(val[index], docPath, fieldName + index)\r\n                ]);\r\n              } else {\r\n                return Promise.all(\r\n                  Object.keys(arrayObj).map(arrayObjFieldName => {\r\n                    const arrayObjVal = arrayObj[arrayObjFieldName];\r\n                    return this.parseDataField(\r\n                      arrayObjVal,\r\n                      docPath,\r\n                      fieldName + arrayObjFieldName + index\r\n                    );\r\n                  })\r\n                );\r\n              }\r\n            })\r\n          );\r\n        }\r\n        await this.parseDataField(val, docPath, fieldName);\r\n      })\r\n    );\r\n    return data;\r\n  }\r\n\r\n  private async parseDataField(ref: any, docPath: string, fieldPath: string) {\r\n    const hasRawFile = !!ref && ref.hasOwnProperty(\"rawFile\");\r\n    if (!hasRawFile) {\r\n      return;\r\n    }\r\n    ref.src = await this.uploadAndGetLink(ref.rawFile, docPath, fieldPath);\r\n    delete ref.rawFile;\r\n  }\r\n\r\n  private async uploadAndGetLink(\r\n    rawFile: any,\r\n    docPath: string,\r\n    fieldPath: string\r\n  ): Promise<string> {\r\n    const storagePath = joinPaths(docPath, fieldPath);\r\n    const storageLink = await this.saveFile(storagePath, rawFile);\r\n    return storageLink;\r\n  }\r\n\r\n  private async saveFile(storagePath: string, rawFile: any): Promise<string> {\r\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\r\n    const task = this.fireWrapper\r\n      .storage()\r\n      .ref(storagePath)\r\n      .put(rawFile);\r\n    try {\r\n      const taskResult: firebase.storage.UploadTaskSnapshot = await new Promise(\r\n        (res, rej) => task.then(res).catch(rej)\r\n      );\r\n      const getDownloadURL = await taskResult.ref.getDownloadURL();\r\n      log(\"saveFile() saved file\", {\r\n        storagePath,\r\n        taskResult,\r\n        getDownloadURL\r\n      });\r\n      return getDownloadURL;\r\n    } catch (storageError) {\r\n      if (storageError.code === \"storage/unknown\") {\r\n        logError(\r\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\r\n          { storageError }\r\n        );\r\n      } else {\r\n        logError(\"saveFile() error saving file\", {\r\n          storageError\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  CREATE,\r\n  DELETE,\r\n  DELETE_MANY,\r\n  GET_LIST,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n  GET_ONE,\r\n  UPDATE,\r\n  UPDATE_MANY\r\n} from \"react-admin\";\r\nimport { log, CheckLogging } from \"../misc/logger\";\r\nimport { RAFirebaseOptions } from \"./RAFirebaseOptions\";\r\nimport { FirebaseClient } from \"./database/FirebaseClient\";\r\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\r\nimport { getAbsolutePath } from \"misc/pathHelper\";\r\n\r\nexport let fb: FirebaseClient;\r\n\r\nexport function DataProvider(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\r\n  const options = optionsInput || {};\r\n  VerifyDataProviderArgs(firebaseConfig, options);\r\n  CheckLogging(firebaseConfig, options);\r\n\r\n  log(\"react-admin-firebase:: Creating FirebaseDataProvider\", { firebaseConfig, options });\r\n  const fireWrapper = new FirebaseWrapper();\r\n  fireWrapper.init(firebaseConfig, optionsInput);\r\n  fb = new FirebaseClient(fireWrapper, options);\r\n  async function providerApi(type: string, resourceName: string, params: any): Promise<any> {\r\n    log(\"FirebaseDataProvider: event\", { type, resourceName, params });\r\n    switch (type) {\r\n      case GET_MANY:\r\n        return fb.apiGetMany(resourceName, params);\r\n      case GET_MANY_REFERENCE:\r\n        return fb.apiGetManyReference(resourceName, params);\r\n      case GET_LIST:\r\n        return fb.apiGetList(resourceName, params);\r\n      case GET_ONE:\r\n        return fb.apiGetOne(resourceName, params);\r\n      case CREATE:\r\n        return fb.apiCreate(resourceName, params);\r\n      case UPDATE:\r\n        return fb.apiUpdate(resourceName, params);\r\n      case UPDATE_MANY:\r\n        return fb.apiUpdateMany(resourceName, params);\r\n      case DELETE:\r\n        return fb.apiDelete(resourceName, params);\r\n      case DELETE_MANY:\r\n        return fb.apiDeleteMany(resourceName, params);\r\n      default:\r\n        return {};\r\n    }\r\n  }\r\n  return providerApi;\r\n}\r\n\r\nfunction VerifyDataProviderArgs(firebaseConfig: {}, options?: RAFirebaseOptions) {\r\n  const hasNoApp = !options || !options.app;\r\n  const hasNoConfig = !firebaseConfig;\r\n  if (hasNoConfig && hasNoApp) {\r\n    throw new Error(\r\n      \"Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider\"\r\n    );\r\n  }\r\n  if (options.rootRef) {\r\n    // Will throw error if rootRef doesn't point to a document\r\n    getAbsolutePath(options.rootRef, 'test');\r\n  }\r\n}","import { IFirebaseWrapper } from \"./IFirebaseWrapper\";\r\nimport { RAFirebaseOptions } from \"providers/RAFirebaseOptions\";\r\n\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/storage\";\r\n\r\nexport class FirebaseWrapper implements IFirebaseWrapper {\r\n  private firestore: firebase.firestore.Firestore;\r\n  private app;\r\n\r\n  constructor() { }\r\n\r\n  public init(firebaseConfig: {}, options: RAFirebaseOptions): void {\r\n    this.app = ObtainFirebaseApp(firebaseConfig, options) as any;\r\n    this.firestore = this.app.firestore();\r\n  }\r\n  public db(): firebase.firestore.Firestore {\r\n    return this.firestore;\r\n  }\r\n  public serverTimestamp() {\r\n    return firebase.firestore.FieldValue.serverTimestamp();\r\n  }\r\n  public auth() {\r\n    return this.app.auth();\r\n  }\r\n  public storage() {\r\n    return this.app.storage();\r\n  }\r\n}\r\n\r\nfunction ObtainFirebaseApp(firebaseConfig: {}, options: RAFirebaseOptions) {\r\n  if (options.app) {\r\n    return options.app;\r\n  }\r\n  const isInitialized = !!firebase.apps.length;\r\n  if (isInitialized) {\r\n    const app = firebase.app();\r\n    return app;\r\n  } else {\r\n    const app = firebase.initializeApp(firebaseConfig);\r\n    return app;\r\n  }\r\n}","// import * as firebase from \"firebase\";\r\nimport { FirebaseAuth } from \"@firebase/auth-types\";\r\n\r\nimport {\r\n  AUTH_LOGIN,\r\n  AUTH_LOGOUT,\r\n  AUTH_ERROR,\r\n  AUTH_CHECK,\r\n  AUTH_GET_PERMISSIONS\r\n} from \"react-admin\";\r\nimport { log, CheckLogging } from \"../misc/logger\";\r\nimport { RAFirebaseOptions } from \"./RAFirebaseOptions\";\r\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\r\n\r\nclass AuthClient {\r\n  private auth: FirebaseAuth;\r\n\r\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\r\n    const options = optionsInput || {};\r\n    log(\"Auth Client: initializing...\", {firebaseConfig, options});\r\n    const fireWrapper = new FirebaseWrapper();\r\n    fireWrapper.init(firebaseConfig, options);\r\n    this.auth = fireWrapper.auth();\r\n  }\r\n\r\n  public async HandleAuthLogin(params) {\r\n    const { username, password } = params;\r\n\r\n    try {\r\n      const user = await this.auth.signInWithEmailAndPassword(\r\n        username,\r\n        password\r\n      );\r\n      log(\"HandleAuthLogin: user sucessfully logged in\", { user });\r\n      return user\r\n    } catch (e) {\r\n      log(\"HandleAuthLogin: invalid credentials\", { params });\r\n      throw new Error(\"Login error: invalid credentials\");\r\n    }\r\n  }\r\n\r\n  public async HandleAuthLogout(params) {\r\n    await this.auth.signOut();\r\n  }\r\n\r\n  public async HandleAuthError(params) { }\r\n\r\n  public async HandleAuthCheck(params) {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      log(\"HandleAuthCheck: user is still logged in\", { user });\r\n    } catch (e) {\r\n      log(\"HandleAuthCheck: \", { e });\r\n      throw new Error(\"Auth check error: \" + e);\r\n    }\r\n  }\r\n\r\n  public async getUserLogin() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth.onAuthStateChanged((user) => {\r\n        if (user) {\r\n          resolve(user);\r\n        } else {\r\n          reject(\"User not logged in\");\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public async HandleGetCurrent() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      log(\"HandleGetCurrent: current user\", { user });\r\n      return user;\r\n    } catch (e) {\r\n      log(\"HandleGetCurrent: no user is logged in\", { e });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async HandleGetPermissions() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.claims;\r\n    } catch (e) {\r\n      log(\"HandleGetPermission: no user is logged in or tokenResult error\", {\r\n        e\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport function AuthProvider(firebaseConfig: {}, options: RAFirebaseOptions) {\r\n  VerifyAuthProviderArgs(firebaseConfig, options);\r\n  const auth = new AuthClient(firebaseConfig, options);\r\n  CheckLogging(firebaseConfig, options);\r\n\r\n  return async (type: string, params: {}) => {\r\n    log(\"Auth Event: \", { type, params });\r\n    {\r\n      switch (type) {\r\n        case AUTH_LOGIN:\r\n          return auth.HandleAuthLogin(params);\r\n        case AUTH_LOGOUT:\r\n          return auth.HandleAuthLogout(params);\r\n        case AUTH_ERROR:\r\n          return auth.HandleAuthError(params);\r\n        case AUTH_CHECK:\r\n          return auth.HandleAuthCheck(params);\r\n        case \"AUTH_GETCURRENT\":\r\n          return auth.HandleGetCurrent();\r\n        case AUTH_GET_PERMISSIONS:\r\n          return auth.HandleGetPermissions();\r\n        default:\r\n          throw new Error(\"Unhandled auth type:\" + type);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction VerifyAuthProviderArgs(firebaseConfig: {}, options: RAFirebaseOptions) {\r\n  const hasNoApp = !options || !options.app;\r\n  const hasNoConfig = !firebaseConfig;\r\n  if (hasNoConfig && hasNoApp) {\r\n    throw new Error(\r\n      \"Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider\"\r\n    );\r\n  }\r\n}\r\n"],"names":["const","observeRequest","dataProvider","options","type","resource","params","safeOptions","Array","isArray","watch","includes","dontwatch","subscribe","observer","then","results","next","catch","error","unsubscribe","RealtimeSaga","realtimeSaga","log","description","obj","ISDEBUG","console","logError","CheckLogging","config","logging","_catch","body","recover","result","e","getAbsolutePath","rootRef","relativePath","Error","withSlashes","path","join","split","length","slice","Symbol","iterator","asyncIterator","ResourceManager","constructor","fireWrapper","db","sortArray","data","field","dir","sort","a","b","aValue","bValue","rawA","rawB","Number","isFinite","toString","toLowerCase","GetResource","this","resources","TryGetResourcePromise","collectionQuery","_this","initPath","RefreshResource","_this2","query","applyQuery","collection","get","newDocs","list","docs","map","doc","parseFireStoreDocument","GetSingleDoc","docId","_this3","res","exists","absolutePath","_this4","isCollectionAccessible","isAccessible","hasBeenInited","removeResource","keys","forEach","key","value","toDate","Function","Object","id","getUserLogin","Promise","resolve","reject","auth","onAuthStateChanged","user","_this6","resourceName","FirebaseClient","rm","apiGetList","filter","tryGetResource","r","filteredData","filterFields","JSON","stringify","fieldNames","item","reduce","previousMatched","fieldName","fieldVal","undefined","fieldSearchText","dataFieldValue","currentIsMatched","filterArray","pageStart","pagination","page","perPage","apiGetOne","apiCreate","getCurrentUserEmail","currentUserEmail","newId","parseDataAndUpload","docObj","createdate","serverTimestamp","lastupdate","updatedby","set","hasOverridenDocId","overridenId","apiUpdate","update","apiUpdateMany","_this5","ids","all","returnData","apiDelete","delete","previousData","apiDeleteMany","_this7","batch","push","commit","apiGetMany","matchDocSnaps","snap","apiGetManyReference","targetField","target","targetValue","matches","val","refresh","_this10","email","docPath","_this12","parseDataField","arrayObj","index","hasOwnProperty","arrayObjFieldName","ref","fieldPath","uploadAndGetLink","rawFile","src","storagePath","saveFile","task","storage","put","rej","taskResult","getDownloadURL","storageError","code","fb","FirebaseWrapper","DataProvider","firebaseConfig","optionsInput","app","VerifyDataProviderArgs","init","GET_MANY","GET_MANY_REFERENCE","GET_LIST","GET_ONE","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","firebase","ObtainFirebaseApp","firestore","FieldValue","AuthClient","AuthProvider","VerifyAuthProviderArgs","AUTH_LOGIN","HandleAuthLogin","AUTH_LOGOUT","HandleAuthLogout","AUTH_ERROR","HandleAuthError","AUTH_CHECK","HandleAuthCheck","HandleGetCurrent","AUTH_GET_PERMISSIONS","HandleGetPermissions","signInWithEmailAndPassword","username","password","signOut","getIdTokenResult","token","claims"],"mappings":"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"}