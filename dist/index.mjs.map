{"version":3,"file":"index.mjs","sources":["../src/misc/arrayHelpers.ts","../src/misc/logger.ts","../src/misc/pathHelper.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/providers/database/ResourceManager.ts","../src/providers/database/FirebaseClient.ts","../src/providers/DataProvider.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["function isEmptyObj(obj) {\r\n  if (!obj) {\r\n    return true;\r\n  }\r\n  return JSON.stringify(obj) === '{}';\r\n}\r\n\r\nexport function sortArray(\r\n  data: Array<{}>,\r\n  field: string,\r\n  dir: 'asc' | 'desc'\r\n): void {\r\n  data.sort((a: {}, b: {}) => {\r\n    const rawA = a[field];\r\n    const rawB = b[field];\r\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\r\n    let aValue: string, bValue: string;\r\n    if (isNumberField) {\r\n      aValue = rawA;\r\n      bValue = rawB;\r\n    } else {\r\n      aValue = (a[field] || '').toString().toLowerCase();\r\n      bValue = (b[field] || '').toString().toLowerCase();\r\n    }\r\n    if (aValue > bValue) {\r\n      return dir === 'asc' ? 1 : -1;\r\n    }\r\n    if (aValue < bValue) {\r\n      return dir === 'asc' ? -1 : 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nexport function filterArray(\r\n  data: Array<{}>,\r\n  filterFields: { [field: string]: string }\r\n): Array<{}> {\r\n  if (isEmptyObj(filterFields)) {\r\n    return data;\r\n  }\r\n  const fieldNames = Object.keys(filterFields);\r\n  return data.filter(item =>\r\n    fieldNames.reduce((previousMatched, fieldName) => {\r\n      let fieldVal = filterFields[fieldName];\r\n      if (fieldVal == null || fieldVal == undefined) {\r\n        fieldVal = '';\r\n      }\r\n      const fieldSearchText = fieldVal.toString().toLowerCase();\r\n      const dataFieldValue = item[fieldName];\r\n      if (dataFieldValue == null) {\r\n        return false;\r\n      }\r\n      const currentIsMatched = dataFieldValue\r\n        .toString()\r\n        .toLowerCase()\r\n        .includes(fieldSearchText);\r\n      return previousMatched || currentIsMatched;\r\n    }, false)\r\n  );\r\n}\r\n","import { RAFirebaseOptions } from \"providers/RAFirebaseOptions\";\r\n\r\n// UTILS\r\n\r\nexport class SimpleLogger {\r\n  private title = 'ðŸ”¥r-a-f: ';\r\n\r\n  public get log() {\r\n    if (ISDEBUG) {\r\n      return (...any) => {};\r\n    }\r\n    const boundLogFn: (...any) => void = console.log.bind(\r\n      console,\r\n      this.title\r\n    );\r\n    return boundLogFn;\r\n  }\r\n\r\n  public get warn() {\r\n    if (ISDEBUG) {\r\n      return (...any) => {};\r\n    }\r\n    const boundLogFn: (...any) => void = console.warn.bind(\r\n      console,\r\n      this.title\r\n    );\r\n    return boundLogFn;\r\n  }\r\n\r\n  public get error() {\r\n    if (ISDEBUG) {\r\n      return (...any) => {};\r\n    }\r\n    const boundLogFn: (...any) => void = console.error.bind(\r\n      console,\r\n      this.title\r\n    );\r\n    return boundLogFn;\r\n  }\r\n}\r\n\r\n// tslint:disable-next-line: no-var-keyword\r\nvar ISDEBUG = false;\r\n\r\nexport function CheckLogging(config: {}, options: RAFirebaseOptions) {\r\n  if ((config && config['debug']) || options.logging) {\r\n    ISDEBUG = true;\r\n  }\r\n}\r\n\r\nconst logger = new SimpleLogger()\r\n\r\nexport const log = logger.log;\r\nexport const logWarn = logger.warn;\r\nexport const logError = logger.error;\r\n","import path from 'path-browserify'\r\n\r\nexport function getAbsolutePath(rootRef: string, relativePath: string): string {\r\n  if (!rootRef) {\r\n    return relativePath;\r\n  }\r\n  if (!relativePath) {\r\n    throw new Error('Resource name must be a string of length greater than 0 characters');\r\n  }\r\n  const withSlashes = path.join('/', rootRef, '/', relativePath, '/');\r\n  const slashCount = withSlashes.split(\"/\").length - 1\r\n  if (slashCount % 2) {\r\n    throw new Error(`The rootRef path must point to a \"document\" not a \"collection\"\r\ne.g. /collection/document/ or /collection/document/collection/document/`);\r\n  }\r\n  const withOutSlashes = withSlashes.slice(1, -1);\r\n  return withOutSlashes;\r\n}\r\n\r\nexport function joinPaths(path1, path2) {\r\n  return path.join(path1, path2);\r\n}","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","// Firebase types\r\nimport {\r\n  CollectionReference,\r\n  QueryDocumentSnapshot,\r\n  FirebaseFirestore\r\n} from \"@firebase/firestore-types\";\r\nimport { RAFirebaseOptions } from \"../RAFirebaseOptions\";\r\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\r\nimport { User } from \"@firebase/auth-types\";\r\nimport { log, getAbsolutePath, messageTypes, logError } from \"../../misc\";\r\n\r\nexport interface IResource {\r\n  path: string;\r\n  pathAbsolute: string;\r\n  collection: CollectionReference;\r\n  list: Array<{}>;\r\n}\r\n\r\nexport class ResourceManager {\r\n  private resources: {\r\n    [resourceName: string]: IResource;\r\n  } = {};\r\n\r\n  private db: FirebaseFirestore;\r\n\r\n  constructor(\r\n    private fireWrapper: IFirebaseWrapper,\r\n    private options: RAFirebaseOptions\r\n  ) {\r\n    this.db = fireWrapper.db();\r\n  }\r\n\r\n  public GetResource(relativePath: string): IResource {\r\n    const resource: IResource = this.resources[relativePath];\r\n    if (!resource) {\r\n      throw new Error(\r\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\r\n      );\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  public async TryGetResourcePromise(\r\n    relativePath: string,\r\n    collectionQuery: messageTypes.CollectionQueryType\r\n  ): Promise<IResource> {\r\n    log(\"resourceManager.TryGetResourcePromise\", {\r\n      relativePath,\r\n      collectionQuery\r\n    });\r\n    await this.initPath(relativePath, collectionQuery);\r\n\r\n    const resource: IResource = this.resources[relativePath];\r\n    if (!resource) {\r\n      throw new Error(\r\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\r\n      );\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  public async RefreshResource(\r\n    relativePath: string,\r\n    collectionQuery: messageTypes.CollectionQueryType\r\n  ) {\r\n    log(\"resourceManager.RefreshResource\", { relativePath, collectionQuery });\r\n    await this.initPath(relativePath, collectionQuery);\r\n    const resource = this.resources[relativePath];\r\n\r\n    const collection = resource.collection;\r\n    const query = this.applyQuery(collection, collectionQuery);\r\n    const newDocs = await query.get();\r\n\r\n    resource.list = newDocs.docs.map(doc => this.parseFireStoreDocument(doc));\r\n    log(\"resourceManager.RefreshResource\", {\r\n      newDocs,\r\n      resource,\r\n      collectionPath: collection.path\r\n    });\r\n  }\r\n\r\n  public async GetSingleDoc(relativePath: string, docId: string) {\r\n    await this.initPath(relativePath);\r\n    const resource = this.resources[relativePath];\r\n    const docSnap = await resource.collection.doc(docId).get();\r\n    if (!docSnap.exists) {\r\n      throw new Error(\"react-admin-firebase: No id found matching: \" + docId);\r\n    }\r\n    const result = this.parseFireStoreDocument(docSnap);\r\n    log(\"resourceManager.GetSingleDoc\", {\r\n      relativePath,\r\n      resource,\r\n      docId,\r\n      docSnap,\r\n      result\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private async initPath(\r\n    relativePath: string,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<void> {\r\n    const absolutePath = getAbsolutePath(this.options.rootRef, relativePath);\r\n    const isAccessible = await this.isCollectionAccessible(\r\n      absolutePath,\r\n      collectionQuery\r\n    );\r\n\r\n    const hasBeenInited = !!this.resources[relativePath];\r\n    log(\"resourceManager.initPath()\", {\r\n      absolutePath,\r\n      isAccessible,\r\n      hasBeenInited\r\n    });\r\n    if (!isAccessible && hasBeenInited) {\r\n      log(\"resourceManager.initPath() not accessible, removing resource...\");\r\n      this.removeResource(relativePath);\r\n      return;\r\n    }\r\n    if (hasBeenInited) {\r\n      log(\"resourceManager.initPath() hasbeen inited already...\");\r\n      return;\r\n    }\r\n    const collection = this.db.collection(absolutePath);\r\n    const list: Array<{}> = [];\r\n    const resource: IResource = {\r\n      collection: collection,\r\n      list: list,\r\n      path: relativePath,\r\n      pathAbsolute: absolutePath\r\n    };\r\n    this.resources[relativePath] = resource;\r\n    log(\"resourceManager.initPath() setting resource...\", {\r\n      resource,\r\n      allResources: this.resources,\r\n      collection: collection,\r\n      collectionPath: collection.path\r\n    });\r\n  }\r\n\r\n  private parseFireStoreDocument(doc: QueryDocumentSnapshot): {} {\r\n    const data = doc.data();\r\n    Object.keys(data).forEach(key => {\r\n      const value = data[key];\r\n      if (value && value.toDate && value.toDate instanceof Function) {\r\n        data[key] = value.toDate();\r\n      }\r\n    });\r\n    // React Admin requires an id field on every document,\r\n    // So we can just using the firestore document id\r\n    return { id: doc.id, ...data };\r\n  }\r\n\r\n  public async getUserLogin(): Promise<User> {\r\n    return new Promise((resolve, reject) => {\r\n      this.fireWrapper.auth().onAuthStateChanged(user => {\r\n        resolve(user);\r\n      });\r\n    });\r\n  }\r\n\r\n  private async isCollectionAccessible(\r\n    absolutePath: string,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<boolean> {\r\n    try {\r\n      const collection = this.db.collection(absolutePath);\r\n      const query = this.applyQuery(collection, collectionQuery);\r\n\r\n      await query.limit(1).get();\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private removeResource(resourceName: string) {\r\n    delete this.resources[resourceName];\r\n  }\r\n\r\n  private applyQuery(\r\n    collection: CollectionReference,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): CollectionReference {\r\n    let collref: CollectionReference;\r\n    if (collectionQuery) {\r\n      collref = collectionQuery(collection);\r\n    } else {\r\n      collref = collection;\r\n    }\r\n    log(\"resourceManager.applyQuery() ...\", {\r\n      collection,\r\n      collectionQuery: (collectionQuery || \"-\").toString(),\r\n      collref\r\n    });\r\n    return collref;\r\n  }\r\n}\r\n","import { FirebaseFirestore } from \"@firebase/firestore-types\";\r\nimport { ResourceManager, IResource } from \"./ResourceManager\";\r\nimport { RAFirebaseOptions } from \"../RAFirebaseOptions\";\r\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\r\nimport { IFirebaseClient } from \"./IFirebaseClient\";\r\nimport {\r\n  filterArray,\r\n  joinPaths,\r\n  log,\r\n  logError,\r\n  messageTypes,\r\n  sortArray\r\n} from \"../../misc\";\r\n\r\nexport class FirebaseClient implements IFirebaseClient {\r\n  private db: FirebaseFirestore;\r\n  private rm: ResourceManager;\r\n\r\n  constructor(\r\n    private fireWrapper: IFirebaseWrapper,\r\n    private options: RAFirebaseOptions\r\n  ) {\r\n    this.db = fireWrapper.db();\r\n    this.rm = new ResourceManager(this.fireWrapper, this.options);\r\n  }\r\n  public async apiGetList(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetList\r\n  ): Promise<messageTypes.IResponseGetList> {\r\n    log(\"apiGetList\", { resourceName, params });\r\n\r\n    const collectionQuery = params.filter.collectionQuery;\r\n    delete params.filter.collectionQuery;\r\n\r\n    const r = await this.tryGetResource(\r\n      resourceName,\r\n      \"REFRESH\",\r\n      collectionQuery\r\n    );\r\n    const data = r.list;\r\n    if (params.sort != null) {\r\n      const { field, order } = params.sort;\r\n      if (order === \"ASC\") {\r\n        sortArray(data, field, \"asc\");\r\n      } else {\r\n        sortArray(data, field, \"desc\");\r\n      }\r\n    }\r\n    // @ts-ignore\r\n    const filteredData = filterArray(data, params.filter);\r\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\r\n    const pageEnd = pageStart + params.pagination.perPage;\r\n    const dataPage = filteredData.slice(pageStart, pageEnd);\r\n    const total = r.list.length;\r\n    return {\r\n      data: dataPage,\r\n      total\r\n    };\r\n  }\r\n  public async apiGetOne(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetOne\r\n  ): Promise<messageTypes.IResponseGetOne> {\r\n    log(\"apiGetOne\", { resourceName, params });\r\n    try {\r\n      const data = await this.rm.GetSingleDoc(resourceName, params.id);\r\n      return { data: data };\r\n    } catch (error) {\r\n      throw new Error(\r\n        \"Error getting id: \" + params.id + \" from collection: \" + resourceName\r\n      );\r\n    }\r\n  }\r\n  public async apiCreate(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsCreate\r\n  ): Promise<messageTypes.IResponseCreate> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiCreate\", { resourceName, resource: r, params });\r\n    const hasOverridenDocId = params.data && params.data.id;\r\n    log(\"apiCreate\", { hasOverridenDocId });\r\n    if (hasOverridenDocId) {\r\n      const overridenId = params.data.id;\r\n      const exists = (await r.collection.doc(overridenId).get()).exists;\r\n      if (exists) {\r\n        throw new Error(\r\n          `the id:\"${overridenId}\" already exists, please use a unique string if overriding the 'id' field`\r\n        );\r\n      }\r\n      const data = await this.parseDataAndUpload(r, overridenId, params.data);\r\n      if (!overridenId) {\r\n        throw new Error(\"id must be a valid string\");\r\n      }\r\n      const docObj = { ...data };\r\n      await this.addCreatedByFields(docObj);\r\n      await this.addUpdatedByFields(docObj);\r\n      log(\"apiCreate\", { docObj });\r\n      await r.collection.doc(overridenId).set(docObj, { merge: false });\r\n      return {\r\n        data: {\r\n          ...data,\r\n          id: overridenId\r\n        }\r\n      };\r\n    }\r\n    const newId = this.db.collection(\"collections\").doc().id;\r\n    const data = await this.parseDataAndUpload(r, newId, params.data);\r\n    const docObj = { ...data };\r\n    await this.addCreatedByFields(docObj);\r\n    await this.addUpdatedByFields(docObj);\r\n    await r.collection.doc(newId).set(docObj, { merge: false });\r\n    return {\r\n      data: {\r\n        ...data,\r\n        id: newId\r\n      }\r\n    };\r\n  }\r\n  public async apiUpdate(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsUpdate\r\n  ): Promise<messageTypes.IResponseUpdate> {\r\n    const id = params.id;\r\n    delete params.data.id;\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiUpdate\", { resourceName, resource: r, params });\r\n    const data = await this.parseDataAndUpload(r, id, params.data);\r\n    const docObj = { ...data };\r\n    await this.addUpdatedByFields(docObj);\r\n    r.collection\r\n      .doc(id)\r\n      .update(docObj)\r\n      .catch(error => {\r\n        logError(\"apiUpdate error\", { error });\r\n      });\r\n    return {\r\n      data: {\r\n        ...data,\r\n        id: id\r\n      }\r\n    };\r\n  }\r\n  public async apiUpdateMany(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsUpdateMany\r\n  ): Promise<messageTypes.IResponseUpdateMany> {\r\n    delete params.data.id;\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiUpdateMany\", { resourceName, resource: r, params });\r\n    const ids = params.ids;\r\n    const returnData = await Promise.all(\r\n      ids.map(async id => {\r\n        const data = await this.parseDataAndUpload(r, id, params.data);\r\n        const docObj = { ...data };\r\n        await this.addUpdatedByFields(docObj);\r\n        r.collection\r\n          .doc(id)\r\n          .update(docObj)\r\n          .catch(error => {\r\n            logError(\"apiUpdateMany error\", { error });\r\n          });\r\n        return {\r\n          ...data,\r\n          id: id\r\n        };\r\n      })\r\n    );\r\n    return {\r\n      data: returnData\r\n    };\r\n  }\r\n  public async apiDelete(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsDelete\r\n  ): Promise<messageTypes.IResponseDelete> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiDelete\", { resourceName, resource: r, params });\r\n    r.collection\r\n      .doc(params.id)\r\n      .delete()\r\n      .catch(error => {\r\n        logError(\"apiDelete error\", { error });\r\n      });\r\n    return {\r\n      data: params.previousData\r\n    };\r\n  }\r\n  public async apiDeleteMany(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsDeleteMany\r\n  ): Promise<messageTypes.IResponseDeleteMany> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiDeleteMany\", { resourceName, resource: r, params });\r\n    const returnData: { id: string }[] = [];\r\n    const batch = this.db.batch();\r\n    for (const id of params.ids) {\r\n      batch.delete(r.collection.doc(id));\r\n      returnData.push({ id });\r\n    }\r\n    batch.commit().catch(error => {\r\n      logError(\"apiDeleteMany error\", { error });\r\n    });\r\n    return { data: returnData };\r\n  }\r\n  public async apiGetMany(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetMany\r\n  ): Promise<messageTypes.IResponseGetMany> {\r\n    const r = await this.tryGetResource(resourceName, \"REFRESH\");\r\n    log(\"apiGetMany\", { resourceName, resource: r, params });\r\n    const ids = params.ids;\r\n    const matchDocSnaps = await Promise.all(\r\n      ids.map(id => r.collection.doc(id).get())\r\n    );\r\n    const matches = matchDocSnaps.map(snap => {\r\n      return { ...snap.data(), id: snap.id };\r\n    });\r\n    return {\r\n      data: matches\r\n    };\r\n  }\r\n  public async apiGetManyReference(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetManyReference\r\n  ): Promise<messageTypes.IResponseGetManyReference> {\r\n    const r = await this.tryGetResource(resourceName, \"REFRESH\");\r\n    log(\"apiGetManyReference\", { resourceName, resource: r, params });\r\n    const data = r.list;\r\n    const targetField = params.target;\r\n    const targetValue = params.id;\r\n    const matches = data.filter(val => val[targetField] === targetValue);\r\n    if (params.sort != null) {\r\n      const { field, order } = params.sort;\r\n      if (order === \"ASC\") {\r\n        sortArray(matches, field, \"asc\");\r\n      } else {\r\n        sortArray(matches, field, \"desc\");\r\n      }\r\n    }\r\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\r\n    const pageEnd = pageStart + params.pagination.perPage;\r\n    const dataPage = matches.slice(pageStart, pageEnd);\r\n    const total = matches.length;\r\n    return { data: dataPage, total };\r\n  }\r\n  private async tryGetResource(\r\n    resourceName: string,\r\n    refresh?: \"REFRESH\",\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<IResource> {\r\n    if (refresh) {\r\n      await this.rm.RefreshResource(resourceName, collectionQuery);\r\n    }\r\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\r\n  }\r\n  private async getCurrentUserEmail() {\r\n    const user = await this.rm.getUserLogin();\r\n    if (user) {\r\n      return user.email;\r\n    } else {\r\n      return \"annonymous user\";\r\n    }\r\n  }\r\n\r\n  private async parseDataAndUpload(r: IResource, id: string, data: any) {\r\n    if (!data) {\r\n      return data;\r\n    }\r\n    const docPath = r.collection.doc(id).path;\r\n\r\n    await Promise.all(\r\n      Object.keys(data).map(async fieldName => {\r\n        const val = data[fieldName];\r\n        const isArray = Array.isArray(val);\r\n        if (isArray) {\r\n          await Promise.all(\r\n            (val as []).map((arrayObj, index) => {\r\n              if (!!val[index] && val[index].hasOwnProperty(\"rawFile\")) {\r\n                return Promise.all([\r\n                  this.parseDataField(val[index], docPath, fieldName + index)\r\n                ]);\r\n              } else {\r\n                return Promise.all(\r\n                  Object.keys(arrayObj).map(arrayObjFieldName => {\r\n                    const arrayObjVal = arrayObj[arrayObjFieldName];\r\n                    return this.parseDataField(\r\n                      arrayObjVal,\r\n                      docPath,\r\n                      fieldName + arrayObjFieldName + index\r\n                    );\r\n                  })\r\n                );\r\n              }\r\n            })\r\n          );\r\n        }\r\n        await this.parseDataField(val, docPath, fieldName);\r\n      })\r\n    );\r\n    return data;\r\n  }\r\n\r\n  private async addCreatedByFields(obj: any) {\r\n    if (this.options.disableMeta) {\r\n      return;\r\n    }\r\n    const currentUserEmail = await this.getCurrentUserEmail();\r\n    obj.createdate = this.fireWrapper.serverTimestamp();\r\n    obj.createdby = currentUserEmail;\r\n  }\r\n\r\n  private async addUpdatedByFields(obj: any) {\r\n    if (this.options.disableMeta) {\r\n      return;\r\n    }\r\n    const currentUserEmail = await this.getCurrentUserEmail();\r\n    obj.lastupdate = this.fireWrapper.serverTimestamp();\r\n    obj.updatedby = currentUserEmail;\r\n  }\r\n\r\n  private async parseDataField(ref: any, docPath: string, fieldPath: string) {\r\n    const hasRawFile = !!ref && ref.hasOwnProperty(\"rawFile\");\r\n    if (!hasRawFile) {\r\n      return;\r\n    }\r\n    ref.src = await this.uploadAndGetLink(ref.rawFile, docPath, fieldPath);\r\n    delete ref.rawFile;\r\n  }\r\n\r\n  private async uploadAndGetLink(\r\n    rawFile: any,\r\n    docPath: string,\r\n    fieldPath: string\r\n  ): Promise<string> {\r\n    const storagePath = joinPaths(docPath, fieldPath);\r\n    const storageLink = await this.saveFile(storagePath, rawFile);\r\n    return storageLink;\r\n  }\r\n\r\n  private async saveFile(storagePath: string, rawFile: any): Promise<string> {\r\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\r\n    const task = this.fireWrapper\r\n      .storage()\r\n      .ref(storagePath)\r\n      .put(rawFile);\r\n    try {\r\n      const taskResult: firebase.storage.UploadTaskSnapshot = await new Promise(\r\n        (res, rej) => task.then(res).catch(rej)\r\n      );\r\n      const getDownloadURL = await taskResult.ref.getDownloadURL();\r\n      log(\"saveFile() saved file\", {\r\n        storagePath,\r\n        taskResult,\r\n        getDownloadURL\r\n      });\r\n      return getDownloadURL;\r\n    } catch (storageError) {\r\n      if (storageError.code === \"storage/unknown\") {\r\n        logError(\r\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\r\n          { storageError }\r\n        );\r\n      } else {\r\n        logError(\"saveFile() error saving file\", {\r\n          storageError\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  CREATE,\r\n  DELETE,\r\n  DELETE_MANY,\r\n  GET_LIST,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n  GET_ONE,\r\n  UPDATE,\r\n  UPDATE_MANY\r\n} from \"react-admin\";\r\nimport { getAbsolutePath, log, CheckLogging } from \"../misc\";\r\nimport { RAFirebaseOptions } from \"./RAFirebaseOptions\";\r\nimport { FirebaseClient } from \"./database/FirebaseClient\";\r\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\r\n\r\nexport let fb: FirebaseClient;\r\n\r\nexport function DataProvider(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\r\n  const options = optionsInput || {};\r\n  VerifyDataProviderArgs(firebaseConfig, options);\r\n  CheckLogging(firebaseConfig, options);\r\n\r\n  log(\"react-admin-firebase:: Creating FirebaseDataProvider\", { firebaseConfig, options });\r\n  const fireWrapper = new FirebaseWrapper();\r\n  fireWrapper.init(firebaseConfig, optionsInput);\r\n  fb = new FirebaseClient(fireWrapper, options);\r\n  async function providerApi(type: string, resourceName: string, params: any): Promise<any> {\r\n    log(\"FirebaseDataProvider: event\", { type, resourceName, params });\r\n    switch (type) {\r\n      case GET_MANY:\r\n        return fb.apiGetMany(resourceName, params);\r\n      case GET_MANY_REFERENCE:\r\n        return fb.apiGetManyReference(resourceName, params);\r\n      case GET_LIST:\r\n        return fb.apiGetList(resourceName, params);\r\n      case GET_ONE:\r\n        return fb.apiGetOne(resourceName, params);\r\n      case CREATE:\r\n        return fb.apiCreate(resourceName, params);\r\n      case UPDATE:\r\n        return fb.apiUpdate(resourceName, params);\r\n      case UPDATE_MANY:\r\n        return fb.apiUpdateMany(resourceName, params);\r\n      case DELETE:\r\n        return fb.apiDelete(resourceName, params);\r\n      case DELETE_MANY:\r\n        return fb.apiDeleteMany(resourceName, params);\r\n      default:\r\n        return {};\r\n    }\r\n  }\r\n  return providerApi;\r\n}\r\n\r\nfunction VerifyDataProviderArgs(firebaseConfig: {}, options?: RAFirebaseOptions) {\r\n  const hasNoApp = !options || !options.app;\r\n  const hasNoConfig = !firebaseConfig;\r\n  if (hasNoConfig && hasNoApp) {\r\n    throw new Error(\r\n      \"Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider\"\r\n    );\r\n  }\r\n  if (options.rootRef) {\r\n    // Will throw error if rootRef doesn't point to a document\r\n    getAbsolutePath(options.rootRef, 'test');\r\n  }\r\n}","import { IFirebaseWrapper } from \"./IFirebaseWrapper\";\r\nimport { RAFirebaseOptions } from \"providers/RAFirebaseOptions\";\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/storage\";\r\n\r\nexport class FirebaseWrapper implements IFirebaseWrapper {\r\n  private firestore: firebase.firestore.Firestore;\r\n  private app: firebase.app.App;\r\n\r\n  constructor() { }\r\n\r\n  public init(firebaseConfig: {}, options: RAFirebaseOptions): void {\r\n    this.app = ObtainFirebaseApp(firebaseConfig, options);\r\n    this.firestore = this.app.firestore();\r\n  }\r\n  public db(): firebase.firestore.Firestore {\r\n    return this.firestore;\r\n  }\r\n  public serverTimestamp() {\r\n    // This line doesn't work for some reason, might be firebase sdk.\r\n    // return firebase.firestore.FieldValue.serverTimestamp();\r\n    return new Date();\r\n  }\r\n  public auth() {\r\n    return this.app.auth() as any;\r\n  }\r\n  public storage() {\r\n    return this.app.storage();\r\n  }\r\n}\r\n\r\nfunction ObtainFirebaseApp(firebaseConfig: {}, options: RAFirebaseOptions): firebase.app.App {\r\n  if (options.app) {\r\n    return options.app;\r\n  }\r\n  const isInitialized = !!firebase.apps.length;\r\n  if (isInitialized) {\r\n    const app = firebase.app();\r\n    return app;\r\n  } else {\r\n    const app = firebase.initializeApp(firebaseConfig);\r\n    return app;\r\n  }\r\n}","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport { FirebaseAuth } from \"@firebase/auth-types\";\r\nimport { log, CheckLogging } from \"../misc\";\r\nimport { RAFirebaseOptions } from \"./RAFirebaseOptions\";\r\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\r\n\r\nclass AuthClient {\r\n  private auth: FirebaseAuth;\r\n\r\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\r\n    const options = optionsInput || {};\r\n    log(\"Auth Client: initializing...\", { firebaseConfig, options });\r\n    const fireWrapper = new FirebaseWrapper();\r\n    fireWrapper.init(firebaseConfig, options);\r\n    this.auth = fireWrapper.auth();\r\n    this.setPersistence(options.persistence);\r\n  }\r\n\r\n  setPersistence(persistenceInput: \"session\" | \"local\" | \"none\") {\r\n    let persistenceResolved: string;\r\n    switch (persistenceInput) {\r\n      case \"local\":\r\n        persistenceResolved = firebase.auth.Auth.Persistence.LOCAL;\r\n        break;\r\n      case \"none\":\r\n        persistenceResolved = firebase.auth.Auth.Persistence.NONE;\r\n        break;\r\n      case \"session\":\r\n      default:\r\n        persistenceResolved = firebase.auth.Auth.Persistence.SESSION;\r\n        break;\r\n    }\r\n    log(\"setPersistence\", { persistenceInput, persistenceResolved });\r\n    this.auth\r\n      .setPersistence(persistenceResolved)\r\n      .catch(error => console.error(error));\r\n  }\r\n\r\n  public async HandleAuthLogin(params) {\r\n    const { username, password } = params;\r\n\r\n    if (username && password) {\r\n      try {\r\n        const user = await this.auth.signInWithEmailAndPassword(\r\n          username,\r\n          password\r\n        );\r\n        log(\"HandleAuthLogin: user sucessfully logged in\", { user });\r\n        return user;\r\n      } catch (e) {\r\n        log(\"HandleAuthLogin: invalid credentials\", { params });\r\n        throw new Error(\"Login error: invalid credentials\");\r\n      }\r\n    } else {\r\n      return this.getUserLogin();\r\n    }\r\n  }\r\n\r\n  public HandleAuthLogout() {\r\n    return this.auth.signOut();\r\n  }\r\n\r\n  public HandleAuthError(error) {\r\n    log(\"HandleAuthLogin: invalid credentials\", { error });\r\n    return Promise.reject(\"Login error: invalid credentials\");\r\n  }\r\n\r\n  public HandleAuthCheck() {\r\n    return this.getUserLogin();\r\n  }\r\n\r\n  public getUserLogin() {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.auth.currentUser) return resolve(this.auth.currentUser);\r\n      const unsubscribe = this.auth.onAuthStateChanged(user => {\r\n        unsubscribe();\r\n        if (user) {\r\n          resolve(user);\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public async HandleGetPermissions() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.claims;\r\n    } catch (e) {\r\n      log(\"HandleGetPermission: no user is logged in or tokenResult error\", {\r\n        e\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async HandleGetJWTAuthTime() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.authTime;\r\n    } catch (e) {\r\n      log(\"HandleGetJWTAuthTime: no user is logged in or tokenResult error\", {\r\n        e\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async HandleGetJWTExpirationTime() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.expirationTime;\r\n    } catch (e) {\r\n      log(\"HandleGetJWTExpirationTime: no user is logged in or tokenResult error\", {\r\n        e\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n    public async HandleGetJWTSignInProvider() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.signInProvider;\r\n    } catch (e) {\r\n      log(\"HandleGetJWTSignInProvider: no user is logged in or tokenResult error\", {\r\n        e\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n     public async HandleGetJWTIssuedAtTime() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.issuedAtTime;\r\n    } catch (e) {\r\n      log(\"HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error\", {\r\n        e\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n      public async HandleGetJWTToken() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.token;\r\n    } catch (e) {\r\n      log(\"HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error\", {\r\n        e\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport function AuthProvider(firebaseConfig: {}, options: RAFirebaseOptions) {\r\n  VerifyAuthProviderArgs(firebaseConfig, options);\r\n  const auth = new AuthClient(firebaseConfig, options);\r\n  CheckLogging(firebaseConfig, options);\r\n\r\n  return {\r\n    login: params => auth.HandleAuthLogin(params),\r\n    logout: () => auth.HandleAuthLogout(),\r\n    checkAuth: () => auth.HandleAuthCheck(),\r\n    checkError: error => auth.HandleAuthError(error),\r\n    getPermissions: () => auth.HandleGetPermissions(),\r\n    getJWTAuthTime: () => auth.HandleGetJWTAuthTime(),\r\n    getJWTExpirationTime: () => auth.HandleGetJWTExpirationTime(),\r\n    getJWTSignInProvider: () => auth.HandleGetJWTSignInProvider(),\r\n    getJWTClaims: () => auth.HandleGetPermissions(),\r\n    getJWTToken: () => auth.HandleGetJWTToken()\r\n  };\r\n}\r\n\r\nfunction VerifyAuthProviderArgs(\r\n  firebaseConfig: {},\r\n  options: RAFirebaseOptions\r\n) {\r\n  const hasNoApp = !options || !options.app;\r\n  const hasNoConfig = !firebaseConfig;\r\n  if (hasNoConfig && hasNoApp) {\r\n    throw new Error(\r\n      \"Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider\"\r\n    );\r\n  }\r\n}\r\n"],"names":["sortArray","data","field","dir","sort","a","b","aValue","bValue","rawA","rawB","Number","isFinite","toString","toLowerCase","SimpleLogger","constructor","prototypeAccessors","log","ISDEBUG","console","bind","this","title","warn","error","CheckLogging","config","options","logging","const","logger","logError","getAbsolutePath","rootRef","relativePath","Error","withSlashes","path","join","split","length","slice","_catch","body","recover","result","e","then","Symbol","iterator","asyncIterator","ResourceManager","fireWrapper","db","GetResource","resource","resources","TryGetResourcePromise","collectionQuery","_this","initPath","RefreshResource","_this2","collection","query","applyQuery","get","newDocs","list","docs","map","doc","parseFireStoreDocument","collectionPath","GetSingleDoc","docId","_this3","docSnap","exists","absolutePath","_this4","isCollectionAccessible","isAccessible","hasBeenInited","removeResource","allResources","keys","forEach","key","value","toDate","Function","Object","id","getUserLogin","Promise","resolve","reject","auth","onAuthStateChanged","user","_this6","limit","resourceName","collref","FirebaseClient","rm","apiGetList","params","filter","tryGetResource","r","filteredData","filterFields","obj","JSON","stringify","fieldNames","item","reduce","previousMatched","fieldName","fieldVal","undefined","fieldSearchText","dataFieldValue","currentIsMatched","includes","filterArray","pageStart","pagination","page","perPage","apiGetOne","apiCreate","newId","parseDataAndUpload","docObj","addCreatedByFields","addUpdatedByFields","set","hasOverridenDocId","overridenId","_r$collection$doc$get","apiUpdate","update","catch","apiUpdateMany","_this5","all","ids","returnData","apiDelete","delete","previousData","apiDeleteMany","_this7","batch","push","commit","apiGetMany","matchDocSnaps","snap","apiGetManyReference","targetField","target","targetValue","matches","val","refresh","_this10","getCurrentUserEmail","email","docPath","_this12","parseDataField","isArray","Array","arrayObj","index","hasOwnProperty","arrayObjFieldName","_this13","disableMeta","currentUserEmail","createdate","serverTimestamp","createdby","_this14","lastupdate","updatedby","ref","fieldPath","uploadAndGetLink","rawFile","src","storagePath","saveFile","task","storage","put","res","rej","taskResult","getDownloadURL","storageError","code","fb","FirebaseWrapper","DataProvider","firebaseConfig","optionsInput","app","VerifyDataProviderArgs","init","type","GET_MANY","GET_MANY_REFERENCE","GET_LIST","GET_ONE","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","firebase","apps","initializeApp","ObtainFirebaseApp","firestore","Date","AuthClient","setPersistence","persistence","AuthProvider","VerifyAuthProviderArgs","login","HandleAuthLogin","logout","HandleAuthLogout","checkAuth","HandleAuthCheck","checkError","HandleAuthError","getPermissions","HandleGetPermissions","getJWTAuthTime","HandleGetJWTAuthTime","getJWTExpirationTime","HandleGetJWTExpirationTime","getJWTSignInProvider","HandleGetJWTSignInProvider","getJWTClaims","getJWTToken","HandleGetJWTToken","persistenceInput","persistenceResolved","Auth","Persistence","LOCAL","NONE","SESSION","username","password","signInWithEmailAndPassword","signOut","currentUser","unsubscribe","getIdTokenResult","token","claims","authTime","expirationTime","signInProvider","HandleGetJWTIssuedAtTime","issuedAtTime"],"mappings":"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"}