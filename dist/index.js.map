{"version":3,"file":"index.js","sources":["../src/misc/logger.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/misc/pathHelper.ts","../src/providers/database/ResourceManager.ts","../src/misc/arrayHelpers.ts","../src/providers/database/FirebaseClient.ts","../src/providers/DataProvider.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["import { RAFirebaseOptions } from \"providers/RAFirebaseOptions\";\r\n\r\n// UTILS\r\n\r\nexport function log(description: string, obj?: {}) {\r\n  if (ISDEBUG) {\r\n    console.log(\"react-admin-firebase: \", description, obj);\r\n  }\r\n}\r\n\r\nexport function logError(description: string, obj?: {}) {\r\n  if (ISDEBUG) {\r\n    console.error(\"react-admin-firebase: \", description, obj);\r\n  }\r\n}\r\n\r\n// tslint:disable-next-line: no-var-keyword\r\nvar ISDEBUG = false;\r\n\r\nexport function CheckLogging(config: {}, options: RAFirebaseOptions) {\r\n  if ((config && config['debug']) || options.logging) {\r\n    ISDEBUG = true;\r\n  }\r\n}","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import path from 'path-browserify'\r\n\r\nexport function getAbsolutePath(rootRef: string, relativePath: string): string {\r\n  if (!rootRef) {\r\n    return relativePath;\r\n  }\r\n  if (!relativePath) {\r\n    throw new Error('Resource name must be a string of length greater than 0 characters');\r\n  }\r\n  const withSlashes = path.join('/', rootRef, '/', relativePath, '/');\r\n  const slashCount = withSlashes.split(\"/\").length - 1\r\n  if (slashCount % 2) {\r\n    throw new Error(`The rootRef path must point to a \"document\" not a \"collection\"\r\ne.g. /collection/document/ or /collection/document/collection/document/`);\r\n  }\r\n  const withOutSlashes = withSlashes.slice(1, -1);\r\n  return withOutSlashes;\r\n}\r\n\r\nexport function joinPaths(path1, path2) {\r\n  return path.join(path1, path2);\r\n}","// Firebase types\r\nimport {\r\n  CollectionReference,\r\n  QueryDocumentSnapshot,\r\n  FirebaseFirestore\r\n} from \"@firebase/firestore-types\";\r\nimport { RAFirebaseOptions } from \"index\";\r\nimport { log } from \"../../misc/logger\";\r\nimport { getAbsolutePath } from \"../../misc/pathHelper\";\r\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\r\nimport { User } from \"@firebase/auth-types\";\r\nimport { messageTypes } from \"../../misc/messageTypes\";\r\n\r\nexport interface IResource {\r\n  path: string;\r\n  pathAbsolute: string;\r\n  collection: CollectionReference;\r\n  list: Array<{}>;\r\n}\r\n\r\nexport class ResourceManager {\r\n  private resources: {\r\n    [resourceName: string]: IResource;\r\n  } = {};\r\n\r\n  private db: FirebaseFirestore;\r\n\r\n  constructor(\r\n    private fireWrapper: IFirebaseWrapper,\r\n    private options: RAFirebaseOptions\r\n  ) {\r\n    this.db = fireWrapper.db();\r\n  }\r\n\r\n  public GetResource(relativePath: string): IResource {\r\n    const resource: IResource = this.resources[relativePath];\r\n    if (!resource) {\r\n      throw new Error(\r\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\r\n      );\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  public async TryGetResourcePromise(\r\n    relativePath: string,\r\n    collectionQuery: messageTypes.CollectionQueryType\r\n  ): Promise<IResource> {\r\n    log(\"resourceManager.TryGetResourcePromise\", { relativePath, collectionQuery });\r\n    await this.initPath(relativePath, collectionQuery);\r\n\r\n    const resource: IResource = this.resources[relativePath];\r\n    if (!resource) {\r\n      throw new Error(\r\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\r\n      );\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  public async RefreshResource(\r\n    relativePath: string,\r\n    collectionQuery: messageTypes.CollectionQueryType\r\n  ) {\r\n    log(\"resourceManager.RefreshResource\", { relativePath, collectionQuery });\r\n    await this.initPath(relativePath, collectionQuery);\r\n    const resource = this.resources[relativePath];\r\n\r\n    const collection = resource.collection;\r\n    const query = this.applyQuery(collection, collectionQuery);\r\n    const newDocs = await query.get();\r\n\r\n    resource.list = newDocs.docs.map(doc => this.parseFireStoreDocument(doc));\r\n  }\r\n\r\n  public async GetSingleDoc(relativePath: string, docId: string) {\r\n    await this.initPath(relativePath);\r\n    const resource = this.resources[relativePath];\r\n    const res = await resource.collection.doc(docId).get();\r\n    if (!res.exists) {\r\n      throw new Error(\"react-admin-firebase: No id found matching: \" + docId);\r\n    }\r\n    const result = this.parseFireStoreDocument(res);\r\n    return result;\r\n  }\r\n\r\n  private async initPath(\r\n    relativePath: string,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<void> {\r\n    const absolutePath = getAbsolutePath(this.options.rootRef, relativePath);\r\n    log(\"resourceManager.initPath:::\", { absolutePath });\r\n    const isAccessible = await this.isCollectionAccessible(\r\n      absolutePath,\r\n      collectionQuery\r\n    );\r\n\r\n    const hasBeenInited = !!this.resources[relativePath];\r\n    log(\"resourceManager.initPath:::\", { absolutePath, isAccessible, hasBeenInited });\r\n    if (!isAccessible && hasBeenInited){\r\n      this.removeResource(relativePath);\r\n      return;\r\n    }\r\n    if (hasBeenInited){\r\n      return;\r\n    }\r\n    const collection = this.db.collection(absolutePath);\r\n    const list: Array<{}> = [];\r\n    const resource: IResource = {\r\n      collection: collection,\r\n      list: list,\r\n      path: relativePath,\r\n      pathAbsolute: absolutePath\r\n    };\r\n    this.resources[relativePath] = resource;\r\n  }\r\n\r\n  private parseFireStoreDocument(doc: QueryDocumentSnapshot): {} {\r\n    const data = doc.data();\r\n    Object.keys(data).forEach(key => {\r\n      const value = data[key];\r\n      if (value && value.toDate && value.toDate instanceof Function) {\r\n        data[key] = value.toDate();\r\n      }\r\n    });\r\n    // React Admin requires an id field on every document,\r\n    // So we can just using the firestore document id\r\n    return { id: doc.id, ...data };\r\n  }\r\n\r\n  public async getUserLogin(): Promise<User> {\r\n    return new Promise((resolve, reject) => {\r\n      this.fireWrapper.auth().onAuthStateChanged(user => {\r\n        resolve(user);\r\n      });\r\n    });\r\n  }\r\n\r\n  private async isCollectionAccessible(\r\n    absolutePath: string,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<boolean> {\r\n    try {\r\n      const collection = this.db.collection(absolutePath);\r\n      const query = this.applyQuery(collection, collectionQuery);\r\n\r\n      await query.limit(1).get();\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private removeResource(resourceName: string) {\r\n    delete this.resources[resourceName];\r\n  }\r\n\r\n  private applyQuery(\r\n    collection: CollectionReference,\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): CollectionReference {\r\n    if (!collectionQuery) return collection;\r\n\r\n    return collectionQuery(collection);\r\n  }\r\n}\r\n","function isEmptyObj(obj) {\r\n  if (!obj) {\r\n    return true;\r\n  }\r\n  return JSON.stringify(obj) === '{}';\r\n}\r\n\r\nexport function sortArray(\r\n  data: Array<{}>,\r\n  field: string,\r\n  dir: 'asc' | 'desc'\r\n): void {\r\n  data.sort((a: {}, b: {}) => {\r\n    const rawA = a[field];\r\n    const rawB = b[field];\r\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\r\n    let aValue: string, bValue: string;\r\n    if (isNumberField) {\r\n      aValue = rawA;\r\n      bValue = rawB;\r\n    } else {\r\n      aValue = (a[field] || '').toString().toLowerCase();\r\n      bValue = (b[field] || '').toString().toLowerCase();\r\n    }\r\n    if (aValue > bValue) {\r\n      return dir === 'asc' ? 1 : -1;\r\n    }\r\n    if (aValue < bValue) {\r\n      return dir === 'asc' ? -1 : 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nexport function filterArray(\r\n  data: Array<{}>,\r\n  filterFields: { [field: string]: string }\r\n): Array<{}> {\r\n  if (isEmptyObj(filterFields)) {\r\n    return data;\r\n  }\r\n  const fieldNames = Object.keys(filterFields);\r\n  return data.filter(item =>\r\n    fieldNames.reduce((previousMatched, fieldName) => {\r\n      let fieldVal = filterFields[fieldName];\r\n      if (fieldVal == null || fieldVal == undefined) {\r\n        fieldVal = '';\r\n      }\r\n      const fieldSearchText = fieldVal.toString().toLowerCase();\r\n      const dataFieldValue = item[fieldName];\r\n      if (dataFieldValue == null) {\r\n        return false;\r\n      }\r\n      const currentIsMatched = dataFieldValue\r\n        .toString()\r\n        .toLowerCase()\r\n        .includes(fieldSearchText);\r\n      return previousMatched || currentIsMatched;\r\n    }, false)\r\n  );\r\n}\r\n","import { FirebaseFirestore } from \"@firebase/firestore-types\";\r\nimport { ResourceManager, IResource } from \"./ResourceManager\";\r\nimport { RAFirebaseOptions } from \"index\";\r\nimport { log, logError } from \"../../misc/logger\";\r\nimport { sortArray, filterArray } from \"../../misc/arrayHelpers\";\r\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\r\nimport { IFirebaseClient } from \"./IFirebaseClient\";\r\nimport { messageTypes } from \"../../misc/messageTypes\";\r\nimport { joinPaths } from \"../../misc/pathHelper\";\r\n\r\nexport class FirebaseClient implements IFirebaseClient {\r\n  private db: FirebaseFirestore;\r\n  private rm: ResourceManager;\r\n\r\n  constructor(\r\n    private fireWrapper: IFirebaseWrapper,\r\n    private options: RAFirebaseOptions\r\n  ) {\r\n    this.db = fireWrapper.db();\r\n    this.rm = new ResourceManager(this.fireWrapper, this.options);\r\n  }\r\n  public async apiGetList(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetList\r\n  ): Promise<messageTypes.IResponseGetList> {\r\n    log(\"apiGetList\", { resourceName, params });\r\n\r\n    const collectionQuery = params.filter.collectionQuery;\r\n    delete params.filter.collectionQuery;\r\n\r\n    const r = await this.tryGetResource(\r\n      resourceName,\r\n      \"REFRESH\",\r\n      collectionQuery\r\n    );\r\n    const data = r.list;\r\n    if (params.sort != null) {\r\n      const { field, order } = params.sort;\r\n      if (order === \"ASC\") {\r\n        sortArray(data, field, \"asc\");\r\n      } else {\r\n        sortArray(data, field, \"desc\");\r\n      }\r\n    }\r\n    // @ts-ignore\r\n    const filteredData = filterArray(data, params.filter);\r\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\r\n    const pageEnd = pageStart + params.pagination.perPage;\r\n    const dataPage = filteredData.slice(pageStart, pageEnd);\r\n    const total = r.list.length;\r\n    return {\r\n      data: dataPage,\r\n      total\r\n    };\r\n  }\r\n  public async apiGetOne(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetOne\r\n  ): Promise<messageTypes.IResponseGetOne> {\r\n    log(\"apiGetOne\", { resourceName, params });\r\n    try {\r\n      const data = await this.rm.GetSingleDoc(resourceName, params.id);\r\n      return { data: data };\r\n    } catch (error) {\r\n      throw new Error(\r\n        \"Error getting id: \" + params.id + \" from collection: \" + resourceName\r\n      );\r\n    }\r\n  }\r\n  public async apiCreate(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsCreate\r\n  ): Promise<messageTypes.IResponseCreate> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiCreate\", { resourceName, resource: r, params });\r\n    const currentUserEmail = await this.getCurrentUserEmail();\r\n    const hasOverridenDocId = params.data && params.data.id;\r\n    if (hasOverridenDocId) {\r\n      const overridenId = params.data.id;\r\n      const data = await this.parseDataAndUpload(r, overridenId, params.data);\r\n      if (!overridenId) {\r\n        throw new Error(\"id must be a valid string\");\r\n      }\r\n      const docObj = {\r\n        ...data,\r\n        createdate: this.fireWrapper.serverTimestamp(),\r\n        lastupdate: this.fireWrapper.serverTimestamp(),\r\n        createdby: currentUserEmail,\r\n        updatedby: currentUserEmail\r\n      };\r\n      await r.collection.doc(overridenId).set(docObj, { merge: true });\r\n      return {\r\n        data: {\r\n          ...data,\r\n          id: overridenId\r\n        }\r\n      };\r\n    }\r\n    const newId = this.db.collection(\"collections\").doc().id;\r\n    const data = await this.parseDataAndUpload(r, newId, params.data);\r\n    const docObj = {\r\n      ...data,\r\n      createdate: this.fireWrapper.serverTimestamp(),\r\n      lastupdate: this.fireWrapper.serverTimestamp(),\r\n      createdby: currentUserEmail,\r\n      updatedby: currentUserEmail\r\n    };\r\n    await r.collection.doc(newId).set(docObj, { merge: false });\r\n    return {\r\n      data: {\r\n        ...data,\r\n        id: newId\r\n      }\r\n    };\r\n  }\r\n  public async apiUpdate(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsUpdate\r\n  ): Promise<messageTypes.IResponseUpdate> {\r\n    const id = params.id;\r\n    delete params.data.id;\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiUpdate\", { resourceName, resource: r, params });\r\n    const currentUserEmail = await this.getCurrentUserEmail();\r\n    const data = await this.parseDataAndUpload(r, id, params.data);\r\n    r.collection\r\n      .doc(id)\r\n      .update({\r\n        ...data,\r\n        lastupdate: this.fireWrapper.serverTimestamp(),\r\n        updatedby: currentUserEmail\r\n      })\r\n      .catch(error => {\r\n        logError(\"apiUpdate error\", { error });\r\n      });\r\n    return {\r\n      data: {\r\n        ...data,\r\n        id: id\r\n      }\r\n    };\r\n  }\r\n  public async apiUpdateMany(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsUpdateMany\r\n  ): Promise<messageTypes.IResponseUpdateMany> {\r\n    delete params.data.id;\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiUpdateMany\", { resourceName, resource: r, params });\r\n    const ids = params.ids;\r\n    const currentUserEmail = await this.getCurrentUserEmail();\r\n    const returnData = await Promise.all(\r\n      ids.map(async id => {\r\n        const data = await this.parseDataAndUpload(r, id, params.data);\r\n        r.collection\r\n          .doc(id)\r\n          .update({\r\n            ...data,\r\n            lastupdate: this.fireWrapper.serverTimestamp(),\r\n            updatedby: currentUserEmail\r\n          })\r\n          .catch(error => {\r\n            logError(\"apiUpdateMany error\", { error });\r\n          });\r\n        return {\r\n          ...data,\r\n          id: id\r\n        };\r\n      })\r\n    );\r\n    return {\r\n      data: returnData\r\n    };\r\n  }\r\n  public async apiDelete(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsDelete\r\n  ): Promise<messageTypes.IResponseDelete> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiDelete\", { resourceName, resource: r, params });\r\n    r.collection\r\n      .doc(params.id)\r\n      .delete()\r\n      .catch(error => {\r\n        logError(\"apiDelete error\", { error });\r\n      });\r\n    return {\r\n      data: params.previousData\r\n    };\r\n  }\r\n  public async apiDeleteMany(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsDeleteMany\r\n  ): Promise<messageTypes.IResponseDeleteMany> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiDeleteMany\", { resourceName, resource: r, params });\r\n    const returnData: { id: string }[] = [];\r\n    const batch = this.db.batch();\r\n    for (const id of params.ids) {\r\n      batch.delete(r.collection.doc(id));\r\n      returnData.push({ id });\r\n    }\r\n    batch.commit().catch(error => {\r\n      logError(\"apiDeleteMany error\", { error });\r\n    });\r\n    return { data: returnData };\r\n  }\r\n  public async apiGetMany(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetMany\r\n  ): Promise<messageTypes.IResponseGetMany> {\r\n    const r = await this.tryGetResource(resourceName, \"REFRESH\");\r\n    log(\"apiGetMany\", { resourceName, resource: r, params });\r\n    const ids = params.ids;\r\n    const matchDocSnaps = await Promise.all(\r\n      ids.map(id => r.collection.doc(id).get())\r\n    );\r\n    const matches = matchDocSnaps.map(snap => {\r\n      return { ...snap.data(), id: snap.id };\r\n    });\r\n    return {\r\n      data: matches\r\n    };\r\n  }\r\n  public async apiGetManyReference(\r\n    resourceName: string,\r\n    params: messageTypes.IParamsGetManyReference\r\n  ): Promise<messageTypes.IResponseGetManyReference> {\r\n    const r = await this.tryGetResource(resourceName, \"REFRESH\");\r\n    log(\"apiGetManyReference\", { resourceName, resource: r, params });\r\n    const data = r.list;\r\n    const targetField = params.target;\r\n    const targetValue = params.id;\r\n    const matches = data.filter(val => val[targetField] === targetValue);\r\n    if (params.sort != null) {\r\n      const { field, order } = params.sort;\r\n      if (order === \"ASC\") {\r\n        sortArray(data, field, \"asc\");\r\n      } else {\r\n        sortArray(data, field, \"desc\");\r\n      }\r\n    }\r\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\r\n    const pageEnd = pageStart + params.pagination.perPage;\r\n    const dataPage = matches.slice(pageStart, pageEnd);\r\n    const total = matches.length;\r\n    return { data: dataPage, total };\r\n  }\r\n  private async tryGetResource(\r\n    resourceName: string,\r\n    refresh?: \"REFRESH\",\r\n    collectionQuery?: messageTypes.CollectionQueryType\r\n  ): Promise<IResource> {\r\n    if (refresh) {\r\n      await this.rm.RefreshResource(resourceName, collectionQuery);\r\n    }\r\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\r\n  }\r\n  private async getCurrentUserEmail() {\r\n    const user = await this.rm.getUserLogin();\r\n    if (user) {\r\n      return user.email;\r\n    } else {\r\n      return \"annonymous user\";\r\n    }\r\n  }\r\n\r\n  private async parseDataAndUpload(r: IResource, id: string, data: any) {\r\n    if (!data) {\r\n      return data;\r\n    }\r\n    const docPath = r.collection.doc(id).path;\r\n\r\n    await Promise.all(\r\n      Object.keys(data).map(async fieldName => {\r\n        const val = data[fieldName];\r\n        const isArray = Array.isArray(val);\r\n        if (isArray) {\r\n          await Promise.all(\r\n            (val as []).map((arrayObj, index) => {\r\n              if (!!val[index] && val[index].hasOwnProperty(\"rawFile\")) {\r\n                return Promise.all([\r\n                  this.parseDataField(val[index], docPath, fieldName + index)\r\n                ]);\r\n              } else {\r\n                return Promise.all(\r\n                  Object.keys(arrayObj).map(arrayObjFieldName => {\r\n                    const arrayObjVal = arrayObj[arrayObjFieldName];\r\n                    return this.parseDataField(\r\n                      arrayObjVal,\r\n                      docPath,\r\n                      fieldName + arrayObjFieldName + index\r\n                    );\r\n                  })\r\n                );\r\n              }\r\n            })\r\n          );\r\n        }\r\n        await this.parseDataField(val, docPath, fieldName);\r\n      })\r\n    );\r\n    return data;\r\n  }\r\n\r\n  private async parseDataField(ref: any, docPath: string, fieldPath: string) {\r\n    const hasRawFile = !!ref && ref.hasOwnProperty(\"rawFile\");\r\n    if (!hasRawFile) {\r\n      return;\r\n    }\r\n    ref.src = await this.uploadAndGetLink(ref.rawFile, docPath, fieldPath);\r\n    delete ref.rawFile;\r\n  }\r\n\r\n  private async uploadAndGetLink(\r\n    rawFile: any,\r\n    docPath: string,\r\n    fieldPath: string\r\n  ): Promise<string> {\r\n    const storagePath = joinPaths(docPath, fieldPath);\r\n    const storageLink = await this.saveFile(storagePath, rawFile);\r\n    return storageLink;\r\n  }\r\n\r\n  private async saveFile(storagePath: string, rawFile: any): Promise<string> {\r\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\r\n    const task = this.fireWrapper\r\n      .storage()\r\n      .ref(storagePath)\r\n      .put(rawFile);\r\n    try {\r\n      const taskResult: firebase.storage.UploadTaskSnapshot = await new Promise(\r\n        (res, rej) => task.then(res).catch(rej)\r\n      );\r\n      const getDownloadURL = await taskResult.ref.getDownloadURL();\r\n      log(\"saveFile() saved file\", {\r\n        storagePath,\r\n        taskResult,\r\n        getDownloadURL\r\n      });\r\n      return getDownloadURL;\r\n    } catch (storageError) {\r\n      if (storageError.code === \"storage/unknown\") {\r\n        logError(\r\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\r\n          { storageError }\r\n        );\r\n      } else {\r\n        logError(\"saveFile() error saving file\", {\r\n          storageError\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  CREATE,\r\n  DELETE,\r\n  DELETE_MANY,\r\n  GET_LIST,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n  GET_ONE,\r\n  UPDATE,\r\n  UPDATE_MANY\r\n} from \"react-admin\";\r\nimport { log, CheckLogging } from \"../misc/logger\";\r\nimport { RAFirebaseOptions } from \"./RAFirebaseOptions\";\r\nimport { FirebaseClient } from \"./database/FirebaseClient\";\r\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\r\nimport { getAbsolutePath } from \"misc/pathHelper\";\r\n\r\nexport let fb: FirebaseClient;\r\n\r\nexport function DataProvider(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\r\n  const options = optionsInput || {};\r\n  VerifyDataProviderArgs(firebaseConfig, options);\r\n  CheckLogging(firebaseConfig, options);\r\n\r\n  log(\"react-admin-firebase:: Creating FirebaseDataProvider\", { firebaseConfig, options });\r\n  const fireWrapper = new FirebaseWrapper();\r\n  fireWrapper.init(firebaseConfig, optionsInput);\r\n  fb = new FirebaseClient(fireWrapper, options);\r\n  async function providerApi(type: string, resourceName: string, params: any): Promise<any> {\r\n    log(\"FirebaseDataProvider: event\", { type, resourceName, params });\r\n    switch (type) {\r\n      case GET_MANY:\r\n        return fb.apiGetMany(resourceName, params);\r\n      case GET_MANY_REFERENCE:\r\n        return fb.apiGetManyReference(resourceName, params);\r\n      case GET_LIST:\r\n        return fb.apiGetList(resourceName, params);\r\n      case GET_ONE:\r\n        return fb.apiGetOne(resourceName, params);\r\n      case CREATE:\r\n        return fb.apiCreate(resourceName, params);\r\n      case UPDATE:\r\n        return fb.apiUpdate(resourceName, params);\r\n      case UPDATE_MANY:\r\n        return fb.apiUpdateMany(resourceName, params);\r\n      case DELETE:\r\n        return fb.apiDelete(resourceName, params);\r\n      case DELETE_MANY:\r\n        return fb.apiDeleteMany(resourceName, params);\r\n      default:\r\n        return {};\r\n    }\r\n  }\r\n  return providerApi;\r\n}\r\n\r\nfunction VerifyDataProviderArgs(firebaseConfig: {}, options?: RAFirebaseOptions) {\r\n  const hasNoApp = !options || !options.app;\r\n  const hasNoConfig = !firebaseConfig;\r\n  if (hasNoConfig && hasNoApp) {\r\n    throw new Error(\r\n      \"Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider\"\r\n    );\r\n  }\r\n  if (options.rootRef) {\r\n    // Will throw error if rootRef doesn't point to a document\r\n    getAbsolutePath(options.rootRef, 'test');\r\n  }\r\n}","import { IFirebaseWrapper } from \"./IFirebaseWrapper\";\r\nimport { RAFirebaseOptions } from \"providers/RAFirebaseOptions\";\r\n\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/storage\";\r\n\r\nexport class FirebaseWrapper implements IFirebaseWrapper {\r\n  private firestore: firebase.firestore.Firestore;\r\n  private app;\r\n\r\n  constructor() { }\r\n\r\n  public init(firebaseConfig: {}, options: RAFirebaseOptions): void {\r\n    this.app = ObtainFirebaseApp(firebaseConfig, options) as any;\r\n    this.firestore = this.app.firestore();\r\n  }\r\n  public db(): firebase.firestore.Firestore {\r\n    return this.firestore;\r\n  }\r\n  public serverTimestamp() {\r\n    return firebase.firestore.FieldValue.serverTimestamp();\r\n  }\r\n  public auth() {\r\n    return this.app.auth();\r\n  }\r\n  public storage() {\r\n    return this.app.storage();\r\n  }\r\n}\r\n\r\nfunction ObtainFirebaseApp(firebaseConfig: {}, options: RAFirebaseOptions) {\r\n  if (options.app) {\r\n    return options.app;\r\n  }\r\n  const isInitialized = !!firebase.apps.length;\r\n  if (isInitialized) {\r\n    const app = firebase.app();\r\n    return app;\r\n  } else {\r\n    const app = firebase.initializeApp(firebaseConfig);\r\n    return app;\r\n  }\r\n}","// import * as firebase from \"firebase\";\r\nimport { FirebaseAuth } from \"@firebase/auth-types\";\r\nimport { log, CheckLogging } from \"../misc/logger\";\r\nimport { RAFirebaseOptions } from \"./RAFirebaseOptions\";\r\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\r\n\r\nclass AuthClient {\r\n  private auth: FirebaseAuth;\r\n\r\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\r\n    const options = optionsInput || {};\r\n    log(\"Auth Client: initializing...\", {firebaseConfig, options});\r\n    const fireWrapper = new FirebaseWrapper();\r\n    fireWrapper.init(firebaseConfig, options);\r\n    this.auth = fireWrapper.auth();\r\n  }\r\n\r\n  public async HandleAuthLogin(params) {\r\n    const { username, password } = params;\r\n\r\n    if (username && password) {\r\n      try {\r\n        const user = await this.auth.signInWithEmailAndPassword(\r\n          username,\r\n          password\r\n        );\r\n        log(\"HandleAuthLogin: user sucessfully logged in\", { user });\r\n        return user\r\n      } catch (e) {\r\n        log(\"HandleAuthLogin: invalid credentials\", { params });\r\n        throw new Error(\"Login error: invalid credentials\");\r\n      }\r\n    } else {\r\n      return this.getUserLogin();\r\n    }\r\n  }\r\n\r\n  public HandleAuthLogout() {\r\n    return this.auth.signOut();\r\n  }\r\n\r\n  public HandleAuthError(error) {\r\n    log(\"HandleAuthLogin: invalid credentials\", { error });\r\n    return Promise.reject(\"Login error: invalid credentials\");\r\n  }\r\n\r\n  public HandleAuthCheck() {\r\n    return this.getUserLogin();\r\n  }\r\n\r\n  public getUserLogin() {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.auth.currentUser) return resolve(this.auth.currentUser);\r\n      const unsubscribe = this.auth.onAuthStateChanged(user => {\r\n        unsubscribe();\r\n        if (user) {\r\n          resolve(user);\r\n        } else {\r\n          reject();\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  public async HandleGetPermissions() {\r\n    try {\r\n      const user = await this.getUserLogin();\r\n      // @ts-ignore\r\n      const token = await user.getIdTokenResult();\r\n\r\n      return token.claims;\r\n    } catch (e) {\r\n      log(\"HandleGetPermission: no user is logged in or tokenResult error\", {\r\n        e\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport function AuthProvider(firebaseConfig: {}, options: RAFirebaseOptions) {\r\n  VerifyAuthProviderArgs(firebaseConfig, options);\r\n  const auth = new AuthClient(firebaseConfig, options);\r\n  CheckLogging(firebaseConfig, options);\r\n\r\n  return {\r\n    login: params => auth.HandleAuthLogin(params),\r\n    logout: () => auth.HandleAuthLogout(),\r\n    checkAuth: () => auth.HandleAuthCheck(),\r\n    checkError: error => auth.HandleAuthError(error),\r\n    getPermissions: () => auth.HandleGetPermissions(),\r\n  };\r\n}\r\n\r\nfunction VerifyAuthProviderArgs(firebaseConfig: {}, options: RAFirebaseOptions) {\r\n  const hasNoApp = !options || !options.app;\r\n  const hasNoConfig = !firebaseConfig;\r\n  if (hasNoConfig && hasNoApp) {\r\n    throw new Error(\r\n      \"Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider\"\r\n    );\r\n  }\r\n}\r\n"],"names":["log","description","obj","ISDEBUG","console","logError","error","CheckLogging","config","options","logging","_catch","body","recover","result","e","then","getAbsolutePath","rootRef","relativePath","Error","withSlashes","path","join","split","length","slice","Symbol","iterator","asyncIterator","ResourceManager","constructor","fireWrapper","db","sortArray","data","field","dir","sort","a","b","aValue","bValue","rawA","rawB","Number","isFinite","toString","toLowerCase","GetResource","resource","this","resources","TryGetResourcePromise","collectionQuery","_this","initPath","RefreshResource","_this2","query","applyQuery","collection","get","newDocs","list","docs","map","doc","parseFireStoreDocument","GetSingleDoc","docId","_this3","res","exists","absolutePath","_this4","isCollectionAccessible","isAccessible","hasBeenInited","removeResource","keys","forEach","key","value","toDate","Function","Object","id","getUserLogin","Promise","resolve","reject","auth","onAuthStateChanged","user","_this6","limit","resourceName","FirebaseClient","rm","apiGetList","params","filter","tryGetResource","r","filteredData","filterFields","JSON","stringify","fieldNames","item","reduce","previousMatched","fieldName","fieldVal","undefined","fieldSearchText","dataFieldValue","currentIsMatched","includes","filterArray","pageStart","pagination","page","perPage","apiGetOne","apiCreate","getCurrentUserEmail","currentUserEmail","newId","parseDataAndUpload","docObj","createdate","serverTimestamp","lastupdate","updatedby","set","hasOverridenDocId","overridenId","apiUpdate","update","catch","apiUpdateMany","_this5","ids","all","returnData","apiDelete","delete","previousData","apiDeleteMany","_this7","batch","const","push","commit","apiGetMany","matchDocSnaps","snap","apiGetManyReference","targetField","target","targetValue","matches","val","refresh","_this10","email","docPath","_this12","parseDataField","isArray","Array","arrayObj","index","hasOwnProperty","arrayObjFieldName","ref","fieldPath","uploadAndGetLink","rawFile","src","storagePath","saveFile","task","storage","put","rej","taskResult","getDownloadURL","storageError","code","fb","FirebaseWrapper","init","firebaseConfig","app","firebase","ObtainFirebaseApp","firestore","FieldValue","AuthClient","optionsInput","HandleAuthLogin","username","password","signInWithEmailAndPassword","HandleAuthLogout","signOut","HandleAuthError","HandleAuthCheck","currentUser","unsubscribe","HandleGetPermissions","getIdTokenResult","token","claims","VerifyDataProviderArgs","type","GET_MANY","GET_MANY_REFERENCE","GET_LIST","GET_ONE","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","VerifyAuthProviderArgs","login","logout","checkAuth","checkError","getPermissions"],"mappings":"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"}