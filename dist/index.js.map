{"version":3,"file":"index.js","sources":["../src/firebaseDataProvider.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/firebaseAuthProvider.ts","../src/firebaseRealtimeSaga.ts"],"sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\n\r\nimport {\r\n  CREATE,\r\n  DELETE,\r\n  DELETE_MANY,\r\n  GET_LIST,\r\n  GET_MANY,\r\n  GET_MANY_REFERENCE,\r\n  GET_ONE,\r\n  UPDATE,\r\n  UPDATE_MANY\r\n} from \"react-admin\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nexport interface IResource {\r\n  path: string;\r\n  collection: firebase.firestore.CollectionReference;\r\n  observable: Observable<{}>;\r\n  list: Array<{}>;\r\n}\r\n\r\n// UTILS\r\n\r\nfunction isEmptyObj(obj) {\r\n  return JSON.stringify(obj) == \"{}\";\r\n}\r\n\r\nfunction log(description: string, obj: {}) {\r\n  if (ISDEBUG) {\r\n    console.log(description, obj);\r\n  }\r\n}\r\n\r\nvar ISDEBUG = false;\r\n\r\nclass FirebaseClient {\r\n  private db: firebase.firestore.Firestore;\r\n  private app: firebase.app.App;\r\n  private resources: {\r\n    [resourceName: string]: IResource;\r\n  } = {};\r\n\r\n  constructor(firebaseConfig: {}) {\r\n    if (!firebase.apps.length) {\r\n      this.app = firebase.initializeApp(firebaseConfig);\r\n    } else {\r\n      this.app = firebase.app();\r\n    }\r\n    this.db = this.app.firestore();\r\n  }\r\n\r\n  private parseFireStoreDocument(\r\n    doc: firebase.firestore.QueryDocumentSnapshot\r\n  ): {} {\r\n    const data = doc.data();\r\n    Object.keys(data).forEach(key => {\r\n      const value = data[key];\r\n      if (value && value.toDate && value.toDate instanceof Function) {\r\n        data[key] = value.toDate().toISOString();\r\n      }\r\n    });\r\n    // React Admin requires an id field on every document,\r\n    // So we can just using the firestore document id\r\n    return { id: doc.id, ...data };\r\n  }\r\n\r\n  public async initPath(path: string): Promise<void> {\r\n    return new Promise(resolve => {\r\n      const hasBeenInited = this.resources[path];\r\n      if (hasBeenInited) {\r\n        return resolve();\r\n      }\r\n      const collection = this.db.collection(path);\r\n      const observable = this.getCollectionObservable(collection);\r\n      observable.subscribe(\r\n        (querySnapshot: firebase.firestore.QuerySnapshot) => {\r\n          const newList = querySnapshot.docs.map(\r\n            (doc: firebase.firestore.QueryDocumentSnapshot) =>\r\n              this.parseFireStoreDocument(doc)\r\n          );\r\n          this.setList(newList, path);\r\n          // The data has been set, so resolve the promise\r\n          resolve();\r\n        }\r\n      );\r\n      const list: Array<{}> = [];\r\n      const r: IResource = {\r\n        collection,\r\n        list,\r\n        observable,\r\n        path\r\n      };\r\n      this.resources[path] = r;\r\n      log(\"initPath\", { path, r, \"this.resources\": this.resources });\r\n    });\r\n  }\r\n\r\n  public async apiGetList(\r\n    resourceName: string,\r\n    params: IParamsGetList\r\n  ): Promise<IResponseGetList> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    const data = r.list;\r\n    if (params.sort != null) {\r\n      const { field, order } = params.sort;\r\n      if (order === \"ASC\") {\r\n        this.sortArray(data, field, \"asc\");\r\n      } else {\r\n        this.sortArray(data, field, \"desc\");\r\n      }\r\n    }\r\n    log(\"apiGetList\", { resourceName, resource: r, params });\r\n    let filteredData = this.filterArray(data, params.filter);\r\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\r\n    const pageEnd = pageStart + params.pagination.perPage;\r\n    const dataPage = filteredData.slice(pageStart, pageEnd);\r\n    const total = r.list.length;\r\n    return {\r\n      data: dataPage,\r\n      total\r\n    };\r\n  }\r\n\r\n  public async apiGetOne(\r\n    resourceName: string,\r\n    params: IParamsGetOne\r\n  ): Promise<IResponseGetOne> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiGetOne\", { resourceName, resource: r, params });\r\n    const data = r.list.filter((val: { id: string }) => val.id === params.id);\r\n    if (data.length < 1) {\r\n      throw new Error(\r\n        \"react-admin-firebase: No id found matching: \" + params.id\r\n      );\r\n    }\r\n    return { data: data.pop() };\r\n  }\r\n\r\n  public async apiCreate(\r\n    resourceName: string,\r\n    params: IParamsCreate\r\n  ): Promise<IResponseCreate> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiCreate\", { resourceName, resource: r, params });\r\n    const doc = await r.collection.add(params.data);\r\n    return {\r\n      data: {\r\n        ...params.data,\r\n        id: doc.id\r\n      }\r\n    };\r\n  }\r\n\r\n  public async apiUpdate(\r\n    resourceName: string,\r\n    params: IParamsUpdate\r\n  ): Promise<IResponseUpdate> {\r\n    const id = params.id;\r\n    delete params.data.id;\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiUpdate\", { resourceName, resource: r, params });\r\n    r.collection.doc(id).update(params.data);\r\n    return {\r\n      data: {\r\n        ...params.data,\r\n        id\r\n      }\r\n    };\r\n  }\r\n\r\n  public async apiUpdateMany(\r\n    resourceName: string,\r\n    params: IParamsUpdateMany\r\n  ): Promise<IResponseUpdateMany> {\r\n    delete params.data.id;\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiUpdateMany\", { resourceName, resource: r, params });\r\n    const returnData = [];\r\n    for (const id of params.ids) {\r\n      r.collection.doc(id).update(params.data);\r\n      returnData.push({\r\n        ...params.data,\r\n        id\r\n      });\r\n    }\r\n    return {\r\n      data: returnData\r\n    };\r\n  }\r\n\r\n  public async apiDelete(\r\n    resourceName: string,\r\n    params: IParamsDelete\r\n  ): Promise<IResponseDelete> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiDelete\", { resourceName, resource: r, params });\r\n    r.collection.doc(params.id).delete();\r\n    return {\r\n      data: params.previousData\r\n    };\r\n  }\r\n\r\n  public async apiDeleteMany(\r\n    resourceName: string,\r\n    params: IParamsDeleteMany\r\n  ): Promise<IResponseDeleteMany> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiDeleteMany\", { resourceName, resource: r, params });\r\n    const returnData = [];\r\n    const batch = this.db.batch();\r\n    for (const id of params.ids) {\r\n      batch.delete(r.collection.doc(id));\r\n      returnData.push({ id });\r\n    }\r\n    batch.commit();\r\n    return { data: returnData };\r\n  }\r\n\r\n  public async apiGetMany(\r\n    resourceName: string,\r\n    params: IParamsGetMany\r\n  ): Promise<IResponseGetMany> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiGetMany\", { resourceName, resource: r, params });\r\n    const ids = new Set(params.ids);\r\n    const matches = r.list.filter(item => ids.has(item[\"id\"]));\r\n    return {\r\n      data: matches\r\n    };\r\n  }\r\n\r\n  public async apiGetManyReference(\r\n    resourceName: string,\r\n    params: IParamsGetManyReference\r\n  ): Promise<IResponseGetManyReference> {\r\n    const r = await this.tryGetResource(resourceName);\r\n    log(\"apiGetManyReference\", { resourceName, resource: r, params });\r\n    const data = r.list;\r\n    const targetField = params.target;\r\n    const targetValue = params.id;\r\n    const matches = data.filter(val => val[targetField] === targetValue);\r\n    if (params.sort != null) {\r\n      const { field, order } = params.sort;\r\n      if (order === \"ASC\") {\r\n        this.sortArray(data, field, \"asc\");\r\n      } else {\r\n        this.sortArray(data, field, \"desc\");\r\n      }\r\n    }\r\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\r\n    const pageEnd = pageStart + params.pagination.perPage;\r\n    const dataPage = matches.slice(pageStart, pageEnd);\r\n    const total = matches.length;\r\n    return { data: dataPage, total };\r\n  }\r\n\r\n  public GetResource(resourceName: string): IResource {\r\n    return this.tryGetResource(resourceName);\r\n  }\r\n\r\n  private sortArray(data: Array<{}>, field: string, dir: \"asc\" | \"desc\"): void {\r\n    data.sort((a: {}, b: {}) => {\r\n      const aValue = a[field] ? a[field].toString().toLowerCase() : \"\";\r\n      const bValue = b[field] ? b[field].toString().toLowerCase() : \"\";\r\n      if (aValue > bValue) {\r\n        return dir === \"asc\" ? -1 : 1;\r\n      }\r\n      if (aValue < bValue) {\r\n        return dir === \"asc\" ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  private filterArray(\r\n    data: Array<{}>,\r\n    filterFields: { [field: string]: string }\r\n  ): Array<{}> {\r\n    if (isEmptyObj(filterFields)) {\r\n      return data;\r\n    }\r\n    const fieldNames = Object.keys(filterFields);\r\n    return data.filter(item =>\r\n      fieldNames.reduce((previousMatched, fieldName) => {\r\n        const fieldSearchText = filterFields[fieldName].toLowerCase();\r\n        const dataFieldValue = item[fieldName];\r\n        if (dataFieldValue == null) {\r\n          return false;\r\n        }\r\n        const currentIsMatched = dataFieldValue\r\n          .toLowerCase()\r\n          .includes(fieldSearchText);\r\n        return previousMatched || currentIsMatched;\r\n      }, false)\r\n    );\r\n  }\r\n\r\n  private async setList(\r\n    newList: Array<{}>,\r\n    resourceName: string\r\n  ): Promise<void> {\r\n    const resource = await this.tryGetResource(resourceName);\r\n    resource.list = newList;\r\n  }\r\n\r\n  private tryGetResource(resourceName: string): IResource {\r\n    const resource: IResource = this.resources[resourceName];\r\n    if (!resource) {\r\n      throw new Error(\r\n        `react-admin-firebase: Cant find resource: \"${resourceName}\"`\r\n      );\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  private getCollectionObservable(\r\n    collection: firebase.firestore.CollectionReference\r\n  ): Observable<firebase.firestore.QuerySnapshot> {\r\n    const observable: Observable<\r\n      firebase.firestore.QuerySnapshot\r\n    > = Observable.create((observer: any) => collection.onSnapshot(observer));\r\n    // LOGGING\r\n    return observable;\r\n  }\r\n}\r\n\r\nexport let fb: FirebaseClient;\r\n\r\nexport default function FirebaseProvider(config: {}) {\r\n  if (!config) {\r\n    throw new Error('Please pass the Firebase config.json object to the FirebaseDataProvider');\r\n  }\r\n  ISDEBUG = config['debug'];\r\n  fb = new FirebaseClient(config);\r\n  async function providerApi(\r\n    type: string,\r\n    resourceName: string,\r\n    params: any\r\n  ): Promise<any> {\r\n    await fb.initPath(resourceName);\r\n    switch (type) {\r\n      case GET_MANY:\r\n        return fb.apiGetMany(resourceName, params);\r\n      case GET_MANY_REFERENCE:\r\n        return fb.apiGetManyReference(resourceName, params);\r\n      case GET_LIST:\r\n        return fb.apiGetList(resourceName, params);\r\n      case GET_ONE:\r\n        return fb.apiGetOne(resourceName, params);\r\n      case CREATE:\r\n        return fb.apiCreate(resourceName, params);\r\n      case UPDATE:\r\n        return fb.apiUpdate(resourceName, params);\r\n      case UPDATE_MANY:\r\n        return fb.apiUpdateMany(resourceName, params);\r\n      case DELETE:\r\n        return fb.apiDelete(resourceName, params);\r\n      case DELETE_MANY:\r\n        return fb.apiDeleteMany(resourceName, params);\r\n      default:\r\n        return {};\r\n    }\r\n  }\r\n  return providerApi;\r\n}\r\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar iteratorSymbol = Symbol.iterator;\n\t\tif (iteratorSymbol && (iteratorSymbol in target)) {\n\t\t\tvar iterator = target[iteratorSymbol](), step, pact, reject;\n\t\t\tfunction _cycle(result) {\n\t\t\t\ttry {\n\t\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pact) {\n\t\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpact = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_cycle();\n\t\t\tif (iterator.return) {\n\t\t\t\tvar _fixup = function(value) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\t\titerator.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (pact && pact.then) {\n\t\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t_fixup();\n\t\t\t}\n\t\t\treturn pact;\n\t\t}\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"value is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar asyncIteratorSymbol = Symbol.asyncIterator;\n\t\tif (asyncIteratorSymbol && (asyncIteratorSymbol in target)) {\n\t\t\tvar pact = new _Pact();\n\t\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\treturn pact;\n\t\t\tfunction _resumeAfterBody(result) {\n\t\t\t\tif (check && !check()) {\n\t\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t\t}\n\t\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\t}\n\t\t\tfunction _resumeAfterNext(step) {\n\t\t\t\tif (step.done) {\n\t\t\t\t\t_settle(pact, 1);\n\t\t\t\t} else {\n\t\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction _reject(error) {\n\t\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t\t}\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t\tthis[Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))] = function() {\n\t\t\treturn this;\n\t\t};\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from \"react-admin\";\n\nfunction log(description: string, obj?: {}) {\n  if (ISDEBUG) {\n    console.log(\"FirebaseAuthProvider: \" + description, obj);\n  }\n}\n\nvar ISDEBUG = false;\n\nclass AuthClient {\n  app: firebase.app.App;\n  auth: firebase.auth.Auth;\n\n  constructor(firebaseConfig: {}) {\n    log(\"Auth Client: initializing...\");\n    if (!firebase.apps.length) {\n      this.app = firebase.initializeApp(firebaseConfig);\n    } else {\n      this.app = firebase.app();\n    }\n    this.auth = firebase.auth();\n  }\n\n  async HandleAuthLogin(params) {\n    const { username, password } = params;\n\n    try {\n      const user = await this.auth.signInWithEmailAndPassword(\n        username,\n        password\n      );\n      log(\"HandleAuthLogin: user sucessfully logged in\", { user });\n    } catch (e) {\n      log(\"HandleAuthLogin: invalid credentials\", { params });\n      throw new Error(\"Login error: invalid credentials\");\n    }\n  }\n\n  async HandleAuthLogout(params) {\n    await this.auth.signOut();\n  }\n\n  async HandleAuthError(params) {}\n\n  async HandleAuthCheck(params) {\n    try {\n      const user = await this.getUserLogin();\n      log(\"HandleAuthCheck: user is still logged in\", { user });\n    } catch (e) {\n      log(\"HandleAuthCheck: \", { e });\n    }\n  }\n\n  async getUserLogin() {\n    return new Promise((resolve, reject) => {\n      this.auth.onAuthStateChanged(user => {\n        if (user) {\n          resolve(user);\n        } else {\n          reject(\"User not logged in\");\n        }\n      });\n    });\n  }\n}\n\nfunction SetUpAuth(config: {}) {\n  if (!config) {\n    throw new Error(\n      \"Please pass the Firebase config.json object to the FirebaseAuthProvider\"\n    );\n  }\n  ISDEBUG = config[\"debug\"];\n  const auth = new AuthClient(config);\n\n  return async function(type: string, params: {}) {\n    log(\"Auth Event: \", { type, params });\n\n    {\n      switch (type) {\n        case AUTH_LOGIN:\n          await auth.HandleAuthLogin(params);\n        case AUTH_LOGOUT:\n          await auth.HandleAuthLogout(params);\n        case AUTH_ERROR:\n          await auth.HandleAuthError(params);\n        case AUTH_CHECK:\n          await auth.HandleAuthCheck(params);\n        default:\n          throw new Error(\"Unhandled auth type:\" + type);\n      }\n    }\n  };\n}\n\nexport default SetUpAuth;\n","import realtimeSaga from \"ra-realtime\";\r\nimport {\r\n  fb\r\n} from './firebaseDataProvider';\r\n\r\nconst observeRequest = (dataProvider, options) => (type, resource, params) => {  \r\n  // If the paths are explicitly set in options\r\n  if (options && Array.isArray(options.watch) && !options.watch.includes(resource)) {\r\n    // Then don't observe it, if it's not set\r\n    return;\r\n  }\r\n  if (options && Array.isArray(options.dontwatch) && options.dontwatch.includes(resource)) {\r\n    // Then don't observe it, if it's not set\r\n    return;\r\n  }\r\n\r\n  // Use your apollo client methods here or sockets or whatever else including the following very naive polling mechanism\r\n  return {\r\n    subscribe(observer) {\r\n      const resourceObj = fb.GetResource(resource);\r\n      const sub = resourceObj.observable.subscribe(() => {\r\n        dataProvider(type, resource, params)\r\n          .then(results => observer.next(results)) // New data received, notify the observer\r\n          .catch(error => observer.error(error)); // Ouch, an error occured, notify the observer\r\n      });\r\n\r\n      const subscription = {\r\n        unsubscribe() {\r\n          sub.unsubscribe();\r\n          // Notify the saga that we cleaned up everything\r\n          // observer.complete();\r\n          // ^ THIS FAILS FRAMEWORK ISSUE\r\n        }\r\n      };\r\n\r\n      return subscription;\r\n    }\r\n  };\r\n};\r\n\r\nexport default (dataProvider, options) => {\r\n  return realtimeSaga(observeRequest(dataProvider, options));\r\n}\r\n"],"names":["log","description","obj","ISDEBUG","console","fb","FirebaseClient","constructor","firebaseConfig","app","firebase","length","db","this","firestore","_catch","body","recover","result","e","then","parseFireStoreDocument","doc","data","keys","forEach","key","value","toDate","Function","toISOString","Object","id","initPath","path","Promise","resolve","_this","resources","collection","observable","getCollectionObservable","subscribe","querySnapshot","newList","docs","map","setList","r","apiGetList","resourceName","params","_this2","tryGetResource","list","sort","sortArray","filteredData","filterArray","filter","pageStart","pagination","page","perPage","slice","apiGetOne","val","Error","pop","apiCreate","add","apiUpdate","update","apiUpdateMany","returnData","ids","const","push","apiDelete","delete","previousData","apiDeleteMany","_this8","batch","commit","apiGetMany","Set","item","has","apiGetManyReference","_this10","targetField","target","targetValue","matches","GetResource","field","dir","a","b","aValue","toString","toLowerCase","bValue","filterFields","JSON","stringify","fieldNames","reduce","previousMatched","fieldName","fieldSearchText","dataFieldValue","currentIsMatched","includes","resource","Observable","create","observer","onSnapshot","AuthClient","auth","HandleAuthLogin","signInWithEmailAndPassword","username","password","user","HandleAuthLogout","signOut","HandleAuthError","HandleAuthCheck","_this3","getUserLogin","reject","onAuthStateChanged","dataProvider","options","realtimeSaga","type","Array","isArray","watch","dontwatch","sub","results","next","catch","error","unsubscribe","observeRequest","config","GET_MANY","GET_MANY_REFERENCE","GET_LIST","GET_ONE","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","AUTH_LOGIN","AUTH_LOGOUT","AUTH_ERROR","AUTH_CHECK"],"mappings":"sNA6BA,SAASA,EAAIC,EAAqBC,GAC5BC,GACFC,QAAQJ,IAAIC,EAAaC,GAI7B,IAqSWG,EArSPF,GAAU,EAERG,EAOJC,SAAYC,kBAFR,QAMKC,IAHFC,OAAcC,OAGND,QAFAA,gBAAuBF,QAI/BI,GAAKC,KAAKJ,IAAIK,aCkgBhB,SAASC,EAAOC,EAAMC,GAC5B,IACC,IAAIC,EAASF,IACZ,MAAMG,GACP,OAAOF,EAAQE,GAEhB,OAAID,GAAUA,EAAOE,KACbF,EAAOE,UAAK,EAAQH,GAErBC,ECxjBR,SAASlB,EAAIC,EAAqBC,GAC5BC,GACFC,QAAQJ,IAAI,yBAA2BC,EAAaC,GF8C9CmB,YAAAA,gCACNC,OAEMC,EAAOD,EAAIC,qBACVC,KAAKD,GAAME,iBAAQC,OAClBC,EAAQJ,EAAKG,GACfC,GAASA,EAAMC,QAAUD,EAAMC,kBAAkBC,WACnDN,EAAKG,GAAOC,EAAMC,SAASE,iBAKxBC,kBAAEC,GAAIV,EAAIU,QAGNC,YAAAA,kBAASC,aAEIrB,YADjB,IAAIsB,iBAAQC,MACKC,EAAKC,UAAUJ,UAE5BE,QAEHG,EAAaF,EAAKzB,GAAG2B,WAAWL,GAChCM,EAAaH,EAAKI,wBAAwBF,GAChDC,EAAWE,mBACRC,OACOC,EAAUD,EAAcE,KAAKC,aAChCxB,UACCe,EAAKhB,uBAAuBC,OAE3ByB,QAAQH,EAASV,aAMpBc,EAAe,YACnBT,OAFsB,cAItBC,OACAN,KAEGI,UAAUJ,GAAQc,IACnB,WAAY,MAAEd,IAAMc,mBAAqBX,EAAKC,kDAIzCW,YAAAA,oBACXC,EACAC,aAEgBtC,4BAAAuC,EAAKC,eAAeH,kBAA9BF,OACAzB,EAAOyB,EAAEM,QACI,MAAfH,EAAOI,KAAc,OACEJ,EAAOI,OAEzBC,UAAUjC,UADH,gBACgB,MAEA,UAG5B,aAAc,cAAE2B,WAAwBF,SAAGG,QAC3CM,EAAeL,EAAKM,YAAYnC,EAAM4B,EAAOQ,QAC3CC,GAAaT,EAAOU,WAAWC,KAAO,GAAKX,EAAOU,WAAWE,cAI5D,MAFUN,EAAaO,MAAMJ,EADpBA,EAAYT,EAAOU,WAAWE,eAEhCf,EAAEM,KAAK3C,8CAOVsD,YAAAA,mBACXf,EACAC,8BAEgBtC,KAAKwC,eAAeH,kBAA9BF,KACF,YAAa,cAAEE,WAAwBF,SAAGG,QACxC5B,EAAOyB,EAAEM,KAAKK,gBAAQO,UAAwBA,EAAIlC,KAAOmB,EAAOnB,QAClET,EAAKZ,OAAS,QACV,IAAIwD,MACR,+CAAiDhB,EAAOnB,UAGrD,CAAET,KAAMA,EAAK6C,6CAGTC,YAAAA,mBACXnB,EACAC,8BAEgBtC,KAAKwC,eAAeH,kBAA9BF,YACF,YAAa,cAAEE,WAAwBF,SAAGG,oBAC5BH,EAAET,WAAW+B,IAAInB,EAAO5B,qBAApCD,SACC,CACLC,KAAMQ,iBACDoB,EAAO5B,MACVS,GAAIV,EAAIU,8CAKDuC,YAAAA,mBACXrB,EACAC,WAEMnB,EAAKmB,EAAOnB,iBACXmB,EAAO5B,KAAKS,mBACHnB,KAAKwC,eAAeH,kBAA9BF,YACF,YAAa,cAAEE,WAAwBF,SAAGG,IAC9CH,EAAET,WAAWjB,IAAIU,GAAIwC,OAAOrB,EAAO5B,MAC5B,CACLA,KAAMQ,iBACDoB,EAAO5B,SACVS,2CAKOyC,YAAAA,uBACXvB,EACAC,qBAEOA,EAAO5B,KAAKS,mBACHnB,KAAKwC,eAAeH,kBAA9BF,KACF,gBAAiB,cAAEE,WAAwBF,SAAGG,YAC5CuB,EAAa,SACFvB,EAAOwB,oBAAK,CAAxBC,IAAM5C,OACTgB,EAAET,WAAWjB,IAAIU,GAAIwC,OAAOrB,EAAO5B,MACnCmD,EAAWG,KAAK9C,iBACXoB,EAAO5B,SACVS,WAGG,MACC0C,yCAIGI,YAAAA,mBACX5B,EACAC,8BAEgBtC,KAAKwC,eAAeH,kBAA9BF,YACF,YAAa,cAAEE,WAAwBF,SAAGG,IAC9CH,EAAET,WAAWjB,IAAI6B,EAAOnB,IAAI+C,SACrB,CACLxD,KAAM4B,EAAO6B,oDAIJC,YAAAA,uBACX/B,EACAC,aAEgBtC,4BAAAqE,EAAK7B,eAAeH,kBAA9BF,KACF,gBAAiB,cAAEE,WAAwBF,SAAGG,YAC5CuB,EAAa,GACbS,EAAQD,EAAKtE,GAAGuE,cACLhC,EAAOwB,oBAAK,CAAxBC,IAAM5C,OACTmD,EAAMJ,OAAO/B,EAAET,WAAWjB,IAAIU,MACnB6C,KAAK,IAAE7C,WAEpBmD,EAAMC,SACC,MAAQV,yCAGJW,YAAAA,oBACXnC,EACAC,8BAEgBtC,KAAKwC,eAAeH,kBAA9BF,KACF,aAAc,cAAEE,WAAwBF,SAAGG,QACzCwB,EAAM,IAAIW,IAAInC,EAAOwB,WAEpB,MADS3B,EAAEM,KAAKK,gBAAO4B,UAAQZ,EAAIa,IAAID,EAAI,6CAMvCE,YAAAA,6BACXvC,EACAC,aAEgBtC,4BAAA6E,EAAKrC,eAAeH,kBAA9BF,KACF,sBAAuB,cAAEE,WAAwBF,SAAGG,QAClD5B,EAAOyB,EAAEM,KACTqC,EAAcxC,EAAOyC,OACrBC,EAAc1C,EAAOnB,GACrB8D,EAAUvE,EAAKoC,gBAAOO,UAAOA,EAAIyB,KAAiBE,OACrC,MAAf1C,EAAOI,KAAc,OACEJ,EAAOI,OAEzBC,UAAUjC,UADH,gBACgB,MAEA,YAG1BqC,GAAaT,EAAOU,WAAWC,KAAO,GAAKX,EAAOU,WAAWE,cAI5D,MAFU+B,EAAQ9B,MAAMJ,EADfA,EAAYT,EAAOU,WAAWE,eAEhC+B,EAAQnF,8CAIjBoF,YAAAA,qBAAY7C,UACVrC,KAAKwC,eAAeH,IAGrBM,YAAAA,mBAAUjC,EAAiByE,EAAeC,KAC3C1C,cAAM2C,EAAOC,OACVC,EAASF,EAAEF,GAASE,EAAEF,GAAOK,WAAWC,cAAgB,GACxDC,EAASJ,EAAEH,GAASG,EAAEH,GAAOK,WAAWC,cAAgB,UAC1DF,EAASG,EACI,QAARN,GAAiB,EAAI,EAE1BG,EAASG,EACI,QAARN,EAAgB,GAAK,EAEvB,KAIHvC,YAAAA,qBACNnC,EACAiF,MA5P4B,MAAvBC,KAAKC,UA8PKF,UACNjF,EAhQb,IAkQUoF,EAAa5E,OAAOP,KAAKgF,UACxBjF,EAAKoC,gBAAO4B,UACjBoB,EAAWC,gBAAQC,EAAiBC,OAC5BC,EAAkBP,EAAaM,GAAWR,cAC1CU,EAAiBzB,EAAKuB,MACN,MAAlBE,SACK,MAEHC,EAAmBD,EACtBV,cACAY,SAASH,UACLF,GAAmBI,IACzB,MAIOlE,YAAAA,iBACZH,EACAM,8BAEuBrC,KAAKwC,eAAeH,kBAArCiE,GACNA,EAAS7D,KAAOV,wCAGVS,YAAAA,wBAAeH,OACfiE,EAAsBtG,KAAKyB,UAAUY,OACtCiE,QACG,IAAIhD,oDACsCjB,cAG3CiE,GAGD1E,YAAAA,iCACNF,UAII6E,aAAWC,gBAAQC,UAAkB/E,EAAWgF,WAAWD,MEvTnE,IAAInH,GAAU,EAERqH,EAIJjH,SAAYC,GACVR,EAAI,qCAIGS,IAHFC,OAAcC,OAGND,QAFAA,gBAAuBF,QAI/BiH,KAAO/G,UAGRgH,YAAAA,yBAAgBvE,aAICtC,0EAAAwB,EAAKoF,KAAKE,2BAC3BC,EACAC,kBAFIC,KAIF,8CAA+C,MAAEA,0BAEjD,uCAAwC,QAAE3E,IACxC,IAAIgB,MAAM,0EAId4D,YAAAA,0BAAiB5E,8BACftC,KAAK4G,KAAKO,kEAGZC,YAAAA,yBAAgB9E,KAEhB+E,YAAAA,yBAAgB/E,aAECtC,2CAAAsH,EAAKC,8BAAlBN,KACF,2CAA4C,MAAEA,gBAC3C3G,KACH,oBAAqB,GAAEA,uFAIzBiH,YAAAA,kCAEFvH,YADK,IAAIsB,iBAASC,EAASiG,KACtBZ,KAAKa,4BAAmBR,GACvBA,EACF1F,EAAQ0F,GAERO,EAAO,oGCvBDE,EAAcC,UACrBC,WApCeF,EAAcC,mBAAaE,EAAMvB,EAAUhE,QAE7DqF,IAAWG,MAAMC,QAAQJ,EAAQK,QAAWL,EAAQK,MAAM3B,SAASC,OAInEqB,GAAWG,MAAMC,QAAQJ,EAAQM,YAAcN,EAAQM,UAAU5B,SAASC,UAMvE,CACLzE,mBAAU4E,OAEFyB,EADc1I,EAAG0F,YAAYoB,GACX3E,WAAWE,qBACjC6F,EAAaG,EAAMvB,EAAUhE,GAC1B/B,cAAK4H,UAAW1B,EAAS2B,KAAKD,KAC9BE,eAAMC,UAAS7B,EAAS6B,MAAMA,aAGd,CACnBC,uBACEL,EAAIK,mBAaQC,CAAed,EAAcC,2CHiSVc,OAClCA,QACG,IAAInF,MAAM,kFAElBhE,EAAUmJ,EAAM,MAChBjJ,EAAK,IAAIC,EAAegJ,YAEtBZ,EACAxF,EACAC,8BAEM9C,EAAG4B,SAASiB,2BACVwF,QACDa,kBACIlJ,EAAGgF,WAAWnC,EAAcC,QAChCqG,4BACInJ,EAAGoF,oBAAoBvC,EAAcC,QACzCsG,kBACIpJ,EAAG4C,WAAWC,EAAcC,QAChCuG,iBACIrJ,EAAG4D,UAAUf,EAAcC,QAC/BwG,gBACItJ,EAAGgE,UAAUnB,EAAcC,QAC/ByG,gBACIvJ,EAAGkE,UAAUrB,EAAcC,QAC/B0G,qBACIxJ,EAAGoE,cAAcvB,EAAcC,QACnC2G,gBACIzJ,EAAGyE,UAAU5B,EAAcC,QAC/B4G,qBACI1J,EAAG4E,cAAc/B,EAAcC,iBAE/B,wEEpSf,SAAmBmG,OACZA,QACG,IAAInF,MACR,2EAGJhE,EAAUmJ,EAAM,UACV7B,EAAO,IAAID,EAAW8B,mBAENZ,EAAcvF,cAClCnD,EAAI,eAAgB,MAAE0I,SAAMvF,IAGlBuF,QACDsB,oCACGvC,EAAKC,gBAAgBvE,4BACxB8G,qCACGxC,EAAKM,iBAAiB5E,4BACzB+G,oCACGzC,EAAKQ,gBAAgB9E,4BACxBgH,oCACG1C,EAAKS,gBAAgB/E,qCAErB,IAAIgB,MAAM,uBAAyBuE"}